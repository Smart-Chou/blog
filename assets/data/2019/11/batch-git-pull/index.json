{"hash":"1a485f6dceb298c3ce36b831edab4aa62783906c","data":{"post":{"title":"Batch Git Pull：分享一个维护多个 Git 仓库的小脚本","path":"/2019/11/batch-git-pull/","date":"November 13. 2019","timeToRead":4,"cjkWordCount":927,"cjkReadTime":5,"tags":[{"id":"Git","title":"Git","path":"/tag/Git/"},{"id":"Tech","title":"Tech","path":"/tag/Tech/"}],"description":"如何一次更新多个 Git 仓库","published":true,"content":"<p>不废话，放脚本：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-maxdepth</span> <span class=\"token number\">3</span> <span class=\"token parameter variable\">-name</span> .git <span class=\"token parameter variable\">-type</span> d <span class=\"token operator\">|</span> <span class=\"token function\">rev</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> <span class=\"token parameter variable\">-c</span> <span class=\"token number\">6</span>- <span class=\"token operator\">|</span> <span class=\"token function\">rev</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token parameter variable\">-I</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token function\">git</span> <span class=\"token parameter variable\">-C</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> pull</code></pre>\n<p>更为方便的，直接将这部分加入你的 <code class=\"language-text\">.zshrc</code> 或者 <code class=\"language-text\">.bash_profile</code>：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gpall</span><span class=\"token operator\">=</span><span class=\"token string\">\"find . -maxdepth 3 -name .git -type d | rev | cut -c 6- | rev | xargs -I {} git -C {} pull\"</span></code></pre>\n<p>之后，直接执行 <code class=\"language-text\">gpall</code> 即可。</p>\n<p>好了，我们进入正题。</p>\n<h2 id=\"维护多个-git-仓库的需求\"><a href=\"#%E7%BB%B4%E6%8A%A4%E5%A4%9A%E4%B8%AA-git-%E4%BB%93%E5%BA%93%E7%9A%84%E9%9C%80%E6%B1%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>维护多个 Git 仓库的需求</h2>\n<p>维护多个 Git 仓库不容易。我在我存放 GitHub 仓库的目录下运行了一下 <code class=\"language-text\">tree</code>：</p>\n<pre class=\"language-text\"><code class=\"language-text\">.\n├── AIP_BackEnd\n├── Evaluation_BackEnd\n| ... ...\n├── SchoolProjects\n│   ├── Distance-Vector-Algorithm\n│   ├── cartoonize-images\n| ... ...\n│   ├── zanpress-blog\n│   └── zanpress-diagram\n| ... ...\n└── wechat-format\n\n103 directories</code></pre>\n<p>103 个目录……我自己 <code class=\"language-text\">Documents/GitHub</code> 文件夹下就有这么多 Git 仓库，一个一个去更新真的很费事情。如何批量更新 GitHub 本地仓库呢？其实就是一个遍历目录，对匹配到的 Git 仓库在其当前分支下执行 <code class=\"language-text\">git pull</code> 的需求嘛，很简单。</p>\n<h2 id=\"解决方法\"><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>解决方法</h2>\n<p>在 Medium 上面，我找到了一个相当优雅的脚本。前面这个脚本已经分享给各位了，我们重新看一下：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-maxdepth</span> <span class=\"token number\">3</span> <span class=\"token parameter variable\">-name</span> .git <span class=\"token parameter variable\">-type</span> d <span class=\"token operator\">|</span> <span class=\"token function\">rev</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> <span class=\"token parameter variable\">-c</span> <span class=\"token number\">6</span>- <span class=\"token operator\">|</span> <span class=\"token function\">rev</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token parameter variable\">-I</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token function\">git</span> <span class=\"token parameter variable\">-C</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> pull</code></pre>\n<p>可以发现，这一长串命令，事实上就是前面的命令执行结果通过「管道」输出至后面的命令作为输入，也就是命令中 <code class=\"language-text\">|</code> 的功能。我们一段一段看一下这个命令具体都干了什么。</p>\n<h3 id=\"用-find-搜索目录下全部-git-文件夹\"><a href=\"#%E7%94%A8-find-%E6%90%9C%E7%B4%A2%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%85%A8%E9%83%A8-git-%E6%96%87%E4%BB%B6%E5%A4%B9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>用 <code class=\"language-text\">find</code> 搜索目录下全部 <code class=\"language-text\">.git/</code> 文件夹</h3>\n<p>每个 Git 文件夹里面一定有 <code class=\"language-text\">.git</code> 的目录，我们只需要找到 <code class=\"language-text\">.git</code> 文件夹既可以找到 Git 目录。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-maxdepth</span> <span class=\"token number\">3</span> <span class=\"token parameter variable\">-name</span> .git <span class=\"token parameter variable\">-type</span> d</code></pre>\n<p>这里，我们就使用了 <code class=\"language-text\">find</code> 的命令，详见：<a href=\"https://www.gnu.org/software/findutils/manual/html_mono/find.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GNU - Finding Files</a>。我们将命令分解来看：</p>\n<ul>\n<li><code class=\"language-text\">.</code> 表示匹配命令执行路径下的全部文件与文件夹</li>\n<li><code class=\"language-text\">-maxdepth 3</code> 表示向下搜索最多三层级目录</li>\n<li><code class=\"language-text\">-name .git</code> 就是搜索名称为 <code class=\"language-text\">.git</code> 的内容</li>\n<li><code class=\"language-text\">-type d</code> 则指明了我们搜索的范畴：Directories（目录）</li>\n</ul>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-214839.png\" alt=\"搜索 .git 文件夹\"><figcaption>搜索 .git 文件夹</figcaption></figure>\n<p>一目了然，我们下面就这样对每个命令进行分解和解释。</p>\n<h3 id=\"裁剪出我们要的-git-文件夹所在路径\"><a href=\"#%E8%A3%81%E5%89%AA%E5%87%BA%E6%88%91%E4%BB%AC%E8%A6%81%E7%9A%84-git-%E6%96%87%E4%BB%B6%E5%A4%B9%E6%89%80%E5%9C%A8%E8%B7%AF%E5%BE%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>裁剪出我们要的 <code class=\"language-text\">.git</code> 文件夹所在路径</h3>\n<p>上面我们解析出来的路径，每个路径后面都包含一个 <code class=\"language-text\">.git</code>，我们需要统一将这个 <code class=\"language-text\">.git</code> 从字符串中删掉，这样才能一起对给定目录执行 <code class=\"language-text\">git pull</code>。第二步我们进行目录的裁剪。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">..</span>. <span class=\"token operator\">|</span> <span class=\"token function\">rev</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> <span class=\"token parameter variable\">-c</span> <span class=\"token number\">6</span>- <span class=\"token operator\">|</span> <span class=\"token function\">rev</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">..</span>.</code></pre>\n<p>可以发现，这里我们有三部分命令。我们依次对命令进行解析：</p>\n<ol>\n<li><code class=\"language-text\">rev</code>：首先对搜索到的目录（字符串）进行反转</li>\n<li><code class=\"language-text\">cut -c 6-</code>：我们利用 <code class=\"language-text\">cut</code> 工具将路径进行裁剪，<code class=\"language-text\">-c</code> 表示删减的是字符（Characters），<code class=\"language-text\">6-</code> 表示我们删去路径的前 6 个字符（即：<code class=\"language-text\">.git</code>）</li>\n<li><code class=\"language-text\">rev</code>：将处理好的字符串反转回来</li>\n</ol>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-214839-1.png\" alt=\"裁剪路径\"><figcaption>裁剪路径</figcaption></figure>\n<h3 id=\"利用-xargs-执行带参数的-git-pull\"><a href=\"#%E5%88%A9%E7%94%A8-xargs-%E6%89%A7%E8%A1%8C%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84-git-pull\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 <code class=\"language-text\">xargs</code> 执行带参数的 <code class=\"language-text\">git pull</code></h3>\n<p>上一步，我们已经提取出来所有包含 <code class=\"language-text\">.git</code> 的文件夹，现在我们需要批量的执行 <code class=\"language-text\">git pull</code> 来统一拉取仓库。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">xargs</span> <span class=\"token parameter variable\">-I</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token function\">git</span> <span class=\"token parameter variable\">-C</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> pull</code></pre>\n<p>由于 <code class=\"language-text\">git</code> 并不支持传入目录等参数，因此我们需要借助于 <code class=\"language-text\">xargs</code> 来给 <code class=\"language-text\">git</code> 传入拉取路径。上面的命令简明易懂，就相当于 <code class=\"language-text\">xargs</code> 告诉 <code class=\"language-text\">git</code> 拉取以上目录下的全部 Git 仓库。我们来看一看效果：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-214839-2.gif\" alt=\"脚本效果\"><figcaption>脚本效果</figcaption></figure>\n<p>b(￣▽￣)d 👍 成功~</p>\n<h2 id=\"-references\"><a href=\"#-references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>📚 References</h2>\n<ul>\n<li><a href=\"https://medium.com/@codenameyau/updating-multiple-repos-with-one-command-9768c8cdfe46\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Updating Multiple Repos With One Command</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xargs 命令教程</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/batch-git-pull.a209973.9e44cd74cd9e2bf7fc3814545a8ad280.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/batch-git-pull.a67b0b2.9e44cd74cd9e2bf7fc3814545a8ad280.png 480w","/assets/static/batch-git-pull.a209973.9e44cd74cd9e2bf7fc3814545a8ad280.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-4412ccbe8ae898ab0c10eb173947c3c4'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-4412ccbe8ae898ab0c10eb173947c3c4)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsTAAALEwEAmpwYAAABZElEQVRIx%2b2WPU8DMQyG7wcg/gsDExOUAmOHSiwMCAYGoBQxgIABsbCz85OQ%2bJIQpaWi9PN6pe0lTuxM2BUszDnpTrrIQ7K9T%2bzXduAyfoIcIAdIMQA5Qgm%2bSGQJYCbdgkN0aOUiJJQRABaKlnRMoLH9gf0WWcNPIUmAIUhEfTyheExhx9zsQqVA3abwqIkw%2bK4l7wAoWvWUPmtwsGJuT8zVFuws0ldDkgBqZon0ApCTalHUbsDxhi7Mwf6yubuGizJU17DTFAA06c6ABVL8/W9QXdfFeTgswOUmnJUYgFp1SYI1fp3gG4ANMPmmUYi1R723BOdlOC3p7QWsv9A4YmN4t7J3AHRcQlGfBm18vYfKKhwVsfZAYZdGg/R7YNaF2AbchYY9Fo3vT1h/pqjHSE5NvddPYnOAhbITuGb%2bwqk4CfWJTWJhsM5o6Uha8UWemZnE/xah33Uoq9togmtcvk6n4/wAlUSA9JI49%2bAAAAAASUVORK5CYII=' /%3e%3c/svg%3e"}},"previous":{"title":"Working Copy + iA Writer：第二次尝试从我的 iPad 上面更新博客","path":"/2019/11/update-from-ipad-iawriter/"},"next":null},"context":{"previousElement":"8fc7ef294b781aaa7bb0d3dba0170d6a","nextElement":"##empty##","id":"d17442c5a6185d61b476c645b23180e3"}}