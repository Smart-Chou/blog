{"hash":"1a485f6dceb298c3ce36b831edab4aa62783906c","data":{"tag":{"title":"Security","belongsTo":{"edges":[{"node":{"title":"震惊！竟然有人在 GitHub 上冒充我的身份！","path":"/2020/08/wait-this-is-not-my-commit/","date":"August 30. 2020","timeToRead":13,"cjkWordCount":3160,"cjkReadTime":14,"description":"所以 GPG Key 是必备，不要心存侥幸啦！快让 GitHub 给你的 commit 标上 verified 小勾勾。","content":"<h2 id=\"起因\"><a href=\"#%E8%B5%B7%E5%9B%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>起因</h2>\n<p>这件事情还要从我校为毕业生收拾行李开始讲起。今年六月末北京疫情复发，这一波直接让我们北京高校毕业生无法返校，个人行李物品必须由学校老师代为整理快递回家。这件事情让同级的同学们非常不满，于是微博知乎节奏飞起。当然这件事情是北京统一的行为，其中不光有我校学生自己不满，其他北京的学校听说有些处理的比我校更要糟糕，所以这件事情我们暂且不做评价。但从事情开始，就有「好事」的同学除了在知乎等平台上进行回答评论、表达意见，还直接在 GitHub 上面直接整理记录时间线。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200830_153718.png\" alt=\"一个目录，暂时不放具体仓库与地址\"><figcaption>一个目录，暂时不放具体仓库与地址</figcaption></figure>\n<h2 id=\"我被牵扯进去了\"><a href=\"#%E6%88%91%E8%A2%AB%E7%89%B5%E6%89%AF%E8%BF%9B%E5%8E%BB%E4%BA%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>我被牵扯进去了？</h2>\n<p>为什么这个仓库引起了我的注意呢？首先，对于收拾行李这件事情来说，我所在学院做的其实不错，我自己是我院一位备受尊敬的副教授老师为我收拾的，整理的非常好，所以我个人自始至终并没有对这件事情有什么太大意见，没有参与知乎讨论，也没有进行所谓的争论抗议。这些都是两个月之前发生的事情，但是，两个月之后的今天，有认识我的同学告诉我这个仓库的存在，<strong>并私下询问我为什么也给这个仓库进行了贡献。</strong></p>\n<p><strong>是的，一个我直到昨天都还完全不知道存在的仓库，有人看到了「一条 commit 是由我的邮箱签入的」，并「链接到我的 GitHub 账户」。</strong></p>\n<p>我当时：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200830_154650.png\" alt=\"……\"><figcaption>……</figcaption></figure>\n<p>好奇心让我点开了同学发给我的链接，向下划到 Contributors，果然，我的头像就在那里。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200830_154938.png\" alt=\"淦，老子昨天才知道你这仓库的，宁真厉害\"><figcaption>淦，老子昨天才知道你这仓库的，宁真厉害</figcaption></figure>\n<p>好嘛，除了我的头像，还有个我非常眼熟的头像 —— 下面这位老爷子：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200830_155124.png\" alt=\"这人我看着有点眼熟……\"><figcaption>这人我看着有点眼熟……</figcaption></figure>\n<p>我去，这不是 Python 他爹吗？！！敢情 Python 之父也关心我们小破学校毕业生收拾行李的事情了？</p>\n<h2 id=\"我惊了\"><a href=\"#%E6%88%91%E6%83%8A%E4%BA%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>我惊了</h2>\n<p>仔细看了一下贡献者列表，其中不乏开源世界的知名人物，也包括一些我校在 GitHub 上有账号的同学们。好了，这处处透露着诡异的仓库，<strong>看起来除了这位仓库主人自己的 commit 以外，其余所有的 commit 的身份信息都是伪造的。</strong></p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200830_160029.png\" alt=\"细节修改你个大头鬼啊，这里「我的」commit 周围都被篡改为我身边认识的大佬同学了\"><figcaption>细节修改你个大头鬼啊，这里「我的」commit 周围都被篡改为我身边认识的大佬同学了</figcaption></figure>\n<p>这件事情昨天确实让我非常震惊：Git 的 commit 记录竟然还可以伪造。我确实之前从来没有在意过这类安全问题，以为签入 Git 记录的内容都有完善的身份验证，<strong>而事实证明我太天真了。</strong></p>\n<p>这位我完全不认识的同学，我不知道你是何种初衷，把这个「搞事情」的仓库的 commit 记录在我们都不知情的情况下篡改为我们的身份，<strong>但是你这种行为让我感到非常恶心</strong>。如果你自己都不敢于承担自己「搞事情」所带来的风险，一定要「强行」拉着一群不知情的同学，来装作好多人都对此有所看法、跃跃欲试、一起贡献的样子，<strong>那你还搞个 🐔 8️⃣ 啊！</strong></p>\n<p>那…现在怎么办？我自己给 GitHub Support 已经发去了邮件，不知道这种事情 GitHub 会不会帮我解决，但是从我自己的角度来说，除了尽可能通知我认识的同学他们在 GitHub 上也被人冒充了外，也只能分析一下为什么这种漏洞会存在，以及接下来该如何解决这种问题了。</p>\n<h2 id=\"漏洞分析\"><a href=\"#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>漏洞分析</h2>\n<h3 id=\"git-的设计缺陷\"><a href=\"#git-%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Git 的设计缺陷</h3>\n<p>事实上，Git 本身是具有这样的设计缺陷的。<strong>Git commit 信息的 author 是一个可以零成本造假的字符串。</strong>首先，我们来看看一个 commit 里面包含哪些信息。我们可以用 <code class=\"language-text\">git log</code>（或 Oh My Zsh 的 alias 命令：<code class=\"language-text\">glog</code> 来打印一个更为清楚的 commit 历史）来查看本地 Git 仓库的 commit 记录，并找到一个特定 commit 的 hash，比如我当前仓库的 HEAD commit hash 为 <code class=\"language-text\">d3f97ef</code>。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200830_163010.png\" alt=\"Git 仓库的 commit 记录\"><figcaption>Git 仓库的 commit 记录</figcaption></figure>\n<p>我使用一个上周的 commit hash <code class=\"language-text\">df6eb5f</code>，我们可以用 <code class=\"language-text\">git cat-file -p df6eb5f</code> 来查看这一 commit 的具体信息：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200830_163212.png\" alt=\"Commit hash 为 df6eb5f 的 commit 具体信息\"><figcaption>Commit hash 为 df6eb5f 的 commit 具体信息</figcaption></figure>\n<p>可以发现，每个 commit 都拥有 commit 的 author 和 commit 的 committer，分别是 commit 的第一作者和执行 commit 具体操作的人。如何确认这两人的具体身份呢？Git 仅记录了 commit author 和 committer 二人的名称、邮箱和时间戳，而其中的名称和邮箱正是我们配置 Git 时设定的 <code class=\"language-text\">user.name</code> 和 <code class=\"language-text\">user.email</code>，而 GitHub 也正是通过这两个内容确定 commit 的具体作者和 GitHub 身份的。</p>\n<p>好的，既然我们知道了 Git 和 GitHub 是如何确认身份的，那么我们如何修改 commit author 和 committer 呢？事实上，这两个内容仅是字符串存储的，<code class=\"language-text\">user.name</code> 和 <code class=\"language-text\">user.email</code> 都是可以任意篡改的，因此我们完全可以直接修改自己 git config 中存储的 <code class=\"language-text\">user.name</code> 和 <code class=\"language-text\">user.email</code> 来让本次 commit 的作者变为另一个人。原生 Git 完全没有任何第二层防护！</p>\n<p>甚至，我们可以将整个仓库的 Git commit 历史通过 <code class=\"language-text\">filer-branch</code> 批量修改为其他的人：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-am</span> <span class=\"token string\">\"Destroy production\"</span>\n<span class=\"token function\">git</span> filter-branch --env-filter <span class=\"token punctuation\">\\</span>\n  <span class=\"token string\">'if [ \"$GIT_AUTHOR_EMAIL\" = \"iamthe@evilguy.com\" ]; then\n     GIT_AUTHOR_EMAIL=\"unsuspecting@victim.com\";\n     GIT_AUTHOR_NAME=\"Unsuspecting Victim\";\n     GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL;\n     GIT_COMMITTER_NAME=\"$GIT_AUTHOR_NAME\"; fi'</span> -- <span class=\"token parameter variable\">--all</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-f</span></code></pre>\n<p>大概就是这样，Git 的 commit 是可以任意修改的，你可以将某个坏 commit 嫁祸给别人，甚至将某个坏仓库的 commit 批量嫁祸给毫不知情的人，但我希望大家永远都不要做这样的事情！</p>\n<h3 id=\"如何防范这种行为\"><a href=\"#%E5%A6%82%E4%BD%95%E9%98%B2%E8%8C%83%E8%BF%99%E7%A7%8D%E8%A1%8C%E4%B8%BA\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何防范这种行为？</h3>\n<p>这可怎么办，我们该如何在互联网上证明自己是自己？该如何证明这不是自己？对于 Git 来说，其实我们还是有办法的 —— GPG 签名。GPG 全称为 GNU Privacy Guard，GPG 通过非对称加密来帮助我们从密码学的角度证明「我是我」，也从而证明「这不一定真的是我」。</p>\n<p>使用一个只有我们自己手中拥有的 GPG 私钥对我们的 commit 进行签名，可以让 GitHub 确认我们本次 commit 是真实且是本人操作的。这样，别有用心的他人就无法以我们的身份创建「被签名」的 commit。在 GitHub 上使用的 GPG 密钥和我们的 SSH 密钥并不一样，后者 SSH key 唯一存在的原因是为了向 GitHub 证明身份，用于向我们拥有权限的仓库中进行 commit，而前者 GPG key 则是为了「证明我拥有本次 commit 的著作权」，也只有用 GPG 私钥签名的 commit 在 GitHub 上才会显示如下图的 Verified 绿色钦定小标标。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200830_165356.png\" alt=\"使用 GPG 签名的 commit 会在 GitHub 上显示 Verified 标志\"><figcaption>使用 GPG 签名的 commit 会在 GitHub 上显示 Verified 标志</figcaption></figure>\n<h2 id=\"使用-gpg-key-来证明-commit-著作权\"><a href=\"#%E4%BD%BF%E7%94%A8-gpg-key-%E6%9D%A5%E8%AF%81%E6%98%8E-commit-%E8%91%97%E4%BD%9C%E6%9D%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>使用 GPG key 来证明 commit 著作权</h2>\n<div class=\"admonition admonition-note\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\"><path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"></path></svg></div>💙 GitHub 官方文档</h5></div><div class=\"admonition-content\"><p>GitHub 官方文档拥有更为详细的 GPG 密钥构建和添加方法：<a href=\"https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Managing commit signature verification</a>.</p></div></div>\n<h3 id=\"下载安装-gpg\"><a href=\"#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85-gpg\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>下载安装 GPG</h3>\n<p>首先，我们需要下载安装 GPG 命令行工具，在 Windows 上可以通过 <code class=\"language-text\">scoop install gpg</code> 来安装，大部分 Linux 发行版也应该直接拥有 GPG 工具。</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Windows 用户下载安装 GPG</span>\n$ scoop <span class=\"token function\">install</span> gpg</code></pre>\n<p>使用 <code class=\"language-text\">gpg --version</code> 查看 GPG 安装情况和版本信息，并记住 GPG 存储根目录：即输出内容中的 Home 目录。</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 测试 GPG（Windows 或 Linux）</span>\n$ gpg <span class=\"token parameter variable\">--version</span>\n\ngpg <span class=\"token punctuation\">(</span>GnuPG<span class=\"token punctuation\">)</span> <span class=\"token number\">2.2</span>.19\nlibgcrypt <span class=\"token number\">1.8</span>.5\nCopyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token number\">2019</span> Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version <span class=\"token number\">3</span> or later <span class=\"token operator\">&lt;</span>https://gnu.org/licenses/gpl.html<span class=\"token operator\">></span>\nThis is <span class=\"token function\">free</span> software: you are <span class=\"token function\">free</span> to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nHome: /home/spencer/.gnupg\nSupported algorithms:\nPubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA\nCipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,\n        CAMELLIA128, CAMELLIA192, CAMELLIA256\nHash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224\nCompression: Uncompressed, ZIP, ZLIB, BZIP2</code></pre>\n<h3 id=\"为自己生成一对-gpg-密钥\"><a href=\"#%E4%B8%BA%E8%87%AA%E5%B7%B1%E7%94%9F%E6%88%90%E4%B8%80%E5%AF%B9-gpg-%E5%AF%86%E9%92%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>为自己生成一对 GPG 密钥</h3>\n<p>之后，我们就可以用下面的命令来为自己生成一个 GPG 公钥和私钥：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">$ gpg --full-generate-key</code></pre>\n<ul>\n<li>在密钥种类处：选择默认 RSA and DSA 即可；</li>\n<li>在密钥长度选项处：按照 GitHub 的要求选择 4096 bits；</li>\n<li>在密钥过期时间处：按照自己的需要选择，默认为永不过期；</li>\n<li>在我们的用户 ID 和 GPG key 签名邮箱处：填写我们的常用用户名，并<strong>填入 GitHub 上面认证过的邮箱</strong>；</li>\n<li>最后，为密钥设置一个安全的密码，并一定记住这一密码。</li>\n</ul>\n<p>这样，我们就生成了我们的第一对 GPG 密钥！我们可以用这样的命令查看当前我们拥有的所有 GPG key：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">$ gpg --list-secret-keys --keyid-format LONG\n\n/home/spencer/.gnupg/pubring.kbx\n--------------------------------\nsec   rsa4096/24CD550268849CA0 <span class=\"token number\">2020</span>-08-29 <span class=\"token punctuation\">[</span>SC<span class=\"token punctuation\">]</span>\n      9433E1B6807DE7C15E20DC3B24CD550268849CA0\nuid                 <span class=\"token punctuation\">[</span>ultimate<span class=\"token punctuation\">]</span> Spencer Woo <span class=\"token punctuation\">(</span>My GPG key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>my@email.com<span class=\"token operator\">></span>\nssb   rsa4096/EB754D2B2409E9FE <span class=\"token number\">2020</span>-08-29 <span class=\"token punctuation\">[</span>E<span class=\"token punctuation\">]</span></code></pre>\n<p>其中，<code class=\"language-text\">sec</code> 一行的 <code class=\"language-text\">rsa4096/24CD550268849CA0</code> 就是我们的 GPG 私钥，其中的 <code class=\"language-text\">24CD550268849CA0</code> 即为我们的 GPG 私钥 ID。</p>\n<h3 id=\"告诉-git-自己的-gpg-密钥-id\"><a href=\"#%E5%91%8A%E8%AF%89-git-%E8%87%AA%E5%B7%B1%E7%9A%84-gpg-%E5%AF%86%E9%92%A5-id\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>告诉 Git 自己的 GPG 密钥 ID</h3>\n<p>生成了 GPG 密钥，并拿到了我们的 GPG 私钥 ID 后，我们即可让 Git 用这一 GPG key 为我们的 commit 进行签名：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.signingkey 24CD550268849CA0\n$ <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> commit.gpgsign <span class=\"token boolean\">true</span></code></pre>\n<p>这样设置后，如果没有问题，之后的 commit 中 Git 就会自动为我们用这一 GPG 私钥进行签名。我们可以用这一命令确认签名的存在：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> log --show-signature\n\ncommit c407d4efc980cbee981da50d714a751999b19ddf <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master<span class=\"token punctuation\">)</span>\ngpg: Signature made Sun Aug <span class=\"token number\">30</span> <span class=\"token number\">17</span>:16:18 <span class=\"token number\">2020</span> CST\ngpg:                using RSA key 9433E1B6807DE7C15E20DC3B24CD550268849CA0\ngpg: Good signature from <span class=\"token string\">\"Spencer Woo (My GPG key) &lt;my@email.com>\"</span> <span class=\"token punctuation\">[</span>ultimate<span class=\"token punctuation\">]</span>\nAuthor: spencerwooo <span class=\"token operator\">&lt;</span>my@email.com<span class=\"token operator\">></span>\nDate:   Sun Aug <span class=\"token number\">30</span> <span class=\"token number\">17</span>:16:18 <span class=\"token number\">2020</span> +0800\n\n    Signed by GPG</code></pre>\n<p>另外，此时我们再次用之前查看 commit 详细信息的命令查看本次 commit，我们会发现 GPG 签名已经直接保存于这一 commit 之中了：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> cat-file <span class=\"token parameter variable\">-p</span> c407d4e</code></pre>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200830_172152.png\" alt=\"已经签名过的 commit 包含有我们使用的 PGP signature\"><figcaption>已经签名过的 commit 包含有我们使用的 PGP signature</figcaption></figure>\n<p>另外，这里如果出现类似的问题，可能是 Git 使用的 GPG 命令行工具跟我们生成密钥使用的不一致。我们可以首先用 <code class=\"language-text\">which gpg</code> 来找到我们所使用的 GPG 工具的具体地址，比如 <code class=\"language-text\">/usr/bin/gpg</code>，之后告诉 Git 使用这一 GPG binary 即可：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> gpg.program /usr/bin/gpg</code></pre>\n<div class=\"admonition admonition-important\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg></div>🥦 GPG 可执行文件路径</h5></div><div class=\"admonition-content\"><p>Windows 上的同学，也可以使用 <code class=\"language-text\">which</code> 命令！只需要用 scoop 安装：<code class=\"language-text\">scoop install which</code>，即可方便的用类似 Linux 上的语法找到相应的可执行文件具体路径。</p></div></div>\n<h3 id=\"告诉-github-自己的-gpg-公钥\"><a href=\"#%E5%91%8A%E8%AF%89-github-%E8%87%AA%E5%B7%B1%E7%9A%84-gpg-%E5%85%AC%E9%92%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>告诉 GitHub 自己的 GPG 公钥</h3>\n<p>最后，我们需要告诉 GitHub 我们使用的 GPG 公钥。对于刚刚我们拿到的私钥 ID：<code class=\"language-text\">24CD550268849CA0</code>，我们使用下面的命令即可导出我们的 GPG 公钥：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">$ gpg <span class=\"token parameter variable\">--armor</span> <span class=\"token parameter variable\">--export</span> 24CD550268849CA0</code></pre>\n<p>将输出粘贴进入 GitHub 的 <a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Settings » SSH and GPG keys » New GPG key</a>，并保存。之后，我们就可以开始在 GitHub 上享受 Verified 被钦定的感觉！</p>\n<h2 id=\"小结\"><a href=\"#%E5%B0%8F%E7%BB%93\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>小结</h2>\n<p>使用 GPG 不仅可以证明我们的每次 commit 的所有权，还可以用类似的密码学方法证明 GitHub 账号的所有权、域名的所有权、Twitter 账号的所有权等等。我们将我们的 GPG 公钥托管在某个 GPG 服务器上面，别人就可以利用这一公钥来验证某个被签名的内容是否确实是我们所操作。<a href=\"https://keybase.io/inv/784d1a88fa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Keybase.io</a> 是一个 trusted database for public keys，推荐大家使用 <a href=\"https://keybase.io/inv/784d1a88fa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Keybase.io</a> 托管自己的 GPG 公钥。</p>\n<p>无论如何，大家都可以用这一命令拉取并导入我（Spencer Woo）的 GPG 公钥签名：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">curl</span> https://keybase.io/spencerwoo/pgp_keys.asc <span class=\"token operator\">|</span> gpg <span class=\"token parameter variable\">--import</span></code></pre>\n<ul>\n<li>我的 Keybase 地址：<a href=\"https://keybase.io/spencerwoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">keybase.io/spencerwoo</a></li>\n<li>我的 Keybase 公钥：ASCtXMcCY0UpKPF6NpoLlwJT3xXsD5nzunxF2ei4gBRBkgo</li>\n</ul>\n<p>感谢大家的阅读，希望大家都不会遭遇被冒充的情况！</p>\n"}}]}}},"context":{}}