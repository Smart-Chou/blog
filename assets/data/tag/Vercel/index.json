{"hash":"adc5dd754921ba01e034b10e05b52eb94e7d1500","data":{"tag":{"title":"Vercel","belongsTo":{"edges":[{"node":{"title":"Hit count：用 Google Analytics + Vercel Serverless 为文章添加浏览量统计","path":"/2020/06/serverless-ga-hit-count-api/","date":"June 25. 2020","timeToRead":10,"cjkWordCount":2571,"cjkReadTime":12,"description":"借助 Google Analytics 为数据支撑，使用 Vercel Serverless 为静态博客添加文章阅读数量统计 API。","content":"<div class=\"admonition admonition-note\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\"><path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"></path></svg></div>🍍 编者按</h5></div><div class=\"admonition-content\"><p>本文灵感和部分方法极大程度来源于 @printempw 的文章：<a href=\"https://printempw.github.io/google-analytics-api-page-views-counter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">使用 Google Analytics API 实现博客阅读量统计</a>，感谢。(　o=^•ェ•)o</p></div></div>\n<p>静态网站是没有后端服务的，仅有一个前端页面用来渲染网站的全部内容。虽然从部署、管理和访问速度的角度来说，静态网站还是有点优势的，但是没有后端就意味着没有「评论系统」、「浏览量统计」、「登录鉴权」等等功能。如果想要实现这些功能，就必须依赖第三方的服务，才能实现类似的需要。许多同学都像我一样：在自己的博客网站里使用 Google Analytics 用来统计访问量和阅读数，因此对于「浏览量统计」这个功能来说，我们其实可以借助 Google Analytics API 来将我们在管理后台看到的部分数据显示在网站前端里面，从而实现「文章访问、阅读数量」显示的功能。</p>\n<h2 id=\"工作原理\"><a href=\"#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>工作原理</h2>\n<p>Google Analytics 非常强大，能够从非常多的维度来解读你网站的访客来源、浏览量、浏览设备等多种数据。这里当我们进入 Google Analytics 管理后台，在首页我们就可以看到我们网站每个路径在特定时间段之中的浏览数量。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-213128.png\" alt=\"Google Analytics 管理后台中我的博客上周 7 天的每个路径浏览数\"><figcaption>Google Analytics 管理后台中我的博客上周 7 天的每个路径浏览数</figcaption></figure>\n<p>实际上我们需要的就是这个数据。幸好，Google Analytics 提供了类似的 API，可以让我们根据页面路径、时间起止等参数来查询浏览数量。不过 Google Analytics 的原始 API 其实还是比较复杂的，而且其本身在国内访问还是不太顺畅，所以为了减轻我们静态网站前端的负担，<strong>我们可以在 Vercel 上面用 Serverless 方案部署一个 API 中转站</strong>，方便我们静态网站调用，从而实现「文章浏览量显示」的功能。</p>\n<h2 id=\"开启-google-analytics-api\"><a href=\"#%E5%BC%80%E5%90%AF-google-analytics-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>开启 Google Analytics API</h2>\n<p>我们在 Google Analytics 中调用自己网站的分析数据时，需要首先开启 Google Analytics API，获取到鉴权密钥，才可以正常调用 API。我们可以根据 Google 官方教程：<a href=\"https://developers.google.com/analytics/devguides/reporting/core/v4/quickstart/service-py#1_enable_the_api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Analytics Reporting API v4 - Enable the API</a>，或按照下面的办法来开启我们账户的 Google Analytics API：</p>\n<ul>\n<li>首先，前往官方 API 的 <a href=\"https://console.developers.google.com/start/api?id=analyticsreporting.googleapis.com&#x26;credential=client_key\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">setup tools</a> 并根据提示进行设置，选择一个项目（或创建新的项目，比如 <code class=\"language-text\">ga-hit-count</code>），之后选择 Continue，就可以为我们这一项目开启 Google API 了；\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-213128-1.png\" alt=\"为我们的项目开启 Google API\"><figcaption>为我们的项目开启 Google API</figcaption></figure></li>\n<li>接下来，我们会进入 Google API 的 Credentials 设置页面，这里我们首先设置 API 为 Analytics Reporting API，并选择 API 调用方为 Web server，再选择调用数据类型为 Application data，最后选择「不会使用 App Engine 或 Compute Engine」即可；\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-213128-2.png\" alt=\"设置 Google API 类型\"><figcaption>设置 Google API 类型</figcaption></figure></li>\n<li>最后，我们设置基本信息，获取 Credentials 文件。我们设置 Service account name 的名字（比如 <code class=\"language-text\">blog-analytics</code>），设置 Role 为 <code class=\"language-text\">Service Account User</code>，选择 Key type 为 JSON，即可获取 API 凭证，点击 Continue 之后你就可以下载到这一 JSON 格式的 API 凭证文件了。 <figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-213128-3.png\" alt=\"设置 API 凭证信息\"><figcaption>设置 API 凭证信息</figcaption></figure></li>\n</ul>\n<p>我们获取到的 JSON 文件里面应该包含有以下的重要信息：</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"project_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ga-hit-count\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"private_key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-----BEGIN PRIVATE KEY-----\\nxxx-----END PRIVATE KEY-----\\n\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"client_email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blog-hit-count@ga-hit-count.iam.gserviceaccount.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>其中，我们重点关注的就是这三个 API 凭证信息：项目 ID <code class=\"language-text\">project_id</code>、凭证私钥 <code class=\"language-text\">private_key</code> 以及客户邮箱 <code class=\"language-text\">client_email</code>。其中 <code class=\"language-text\">private_key</code> 是我们 API 访问的重要凭证，需要妥善保管，也一定不能签入 <code class=\"language-text\">git</code>。另外，我们需要将 <code class=\"language-text\">client_email</code> 定义的邮箱<strong>作为新用户加入 Google Analytics 后台</strong>，从而让这一邮箱访问到我们 Google Analytics 的数据。详见：<a href=\"https://support.google.com/analytics/answer/1009702\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Add, edit, and delete users and user groups</a>。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-213128-4.png\" alt=\"将 client_email 的邮箱加入 Google Analytics 后台\"><figcaption>将 client_email 的邮箱加入 Google Analytics 后台</figcaption></figure>\n<h2 id=\"使用-vercel-自己部署-serverless-api-用于前端显示\"><a href=\"#%E4%BD%BF%E7%94%A8-vercel-%E8%87%AA%E5%B7%B1%E9%83%A8%E7%BD%B2-serverless-api-%E7%94%A8%E4%BA%8E%E5%89%8D%E7%AB%AF%E6%98%BE%E7%A4%BA\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>使用 Vercel 自己部署 Serverless API 用于前端显示</h2>\n<p>最后，我们就可以借助 Google Analytics API 在 Vercel 上部署中转 API 用于前端静态网站的调用。这里我使用 Node.js 和 Typescript 写好了一个非常简单的基础 Serverless API 项目，位于：<a href=\"https://github.com/spencerwooo/ga-hit-count-serverless\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spencerwooo/ga-hit-count-serverless</a>，同学们可以直接 Fork 我的这一项目用来自己部署。其中，如果自己没有特殊需要，那么 Fork 项目之后我们仅需要修改 <code class=\"language-text\">api/config.ts</code> 里面的配置即可导入 Vercel 一键部署。</p>\n<h3 id=\"修改-ga-hit-count-serverless-的配置\"><a href=\"#%E4%BF%AE%E6%94%B9-ga-hit-count-serverless-%E7%9A%84%E9%85%8D%E7%BD%AE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>修改 <code class=\"language-text\">ga-hit-count-serverless</code> 的配置</h3>\n<p>同学们将这一项目 Fork 至自己的 GitHub 账户上后，进入 <code class=\"language-text\">api/config.ts</code> 即可看到我自己的 API 配置，大致如下：</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  viewId<span class=\"token operator\">:</span> <span class=\"token string\">'{Google Analytics view ID}'</span><span class=\"token punctuation\">,</span>\n  auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    projectId<span class=\"token operator\">:</span> <span class=\"token string\">'{Google API project ID}'</span><span class=\"token punctuation\">,</span>\n    privateKey<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PRIVATE_KEY</span><span class=\"token punctuation\">,</span>\n    clientEmail<span class=\"token operator\">:</span> <span class=\"token string\">'{Google API client email}'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  allFilter<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'{Post path filter}'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  startDate<span class=\"token operator\">:</span> <span class=\"token string\">'{Google API query start date}'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>其中，这些内容我们都需要一一进行设置：</p>\n<ul>\n<li><code class=\"language-text\">viewId</code>：是你的 Google Analytics 视图 ID，可以在 Google Analytics 后台的 Admin » View » View Settings 中找到；\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-213128-5.png\" alt=\"Google Analytics 视图 ID 的设定位置\"><figcaption>Google Analytics 视图 ID 的设定位置</figcaption></figure></li>\n<li><code class=\"language-text\">projectId</code>：是刚刚凭证 JSON 文件中的 <code class=\"language-text\">project_id</code>，直接按照刚刚的凭证填写即可；</li>\n<li><code class=\"language-text\">privateKey</code>：是通过 Vercel 环境变量获取到的 API 凭证私钥，<strong>这里不要更改</strong>；</li>\n<li><code class=\"language-text\">clientEmail</code>：是刚刚凭证 JSON 文件中的 <code class=\"language-text\">client_email</code>，直接按照刚刚的凭证填写即可；</li>\n<li><code class=\"language-text\">allFilter</code>：是通过 Google API 查询时的前缀过滤器，比如你的网站中文章路径以 <code class=\"language-text\">/post</code> 开头，那么就可以设置为 <code class=\"language-text\">[&#39;/post&#39;]</code>。默认为 <code class=\"language-text\">[&#39;/20&#39;]</code>（因为我的文章路径是以 <code class=\"language-text\">/2020</code> 或 <code class=\"language-text\">/2019</code> 开头的）；</li>\n<li><code class=\"language-text\">startDate</code>：是通过 Google API 查询时设定时间段的开始时间，设定一个比较久远的时间即可，默认为 <code class=\"language-text\">2010-01-01</code>。</li>\n</ul>\n<div class=\"admonition admonition-warning\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"16\" viewBox=\"0 0 12 16\"><path fill-rule=\"evenodd\" d=\"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z\"></path></svg></div>🚨 请注意！</h5></div><div class=\"admonition-content\"><p>这里千万千万不要直接将刚刚凭证中获取到的私钥直接粘贴进入 <code class=\"language-text\">privateKey</code> 一项之中，因为这样当我们将 <code class=\"language-text\">config.ts</code> 签入 <code class=\"language-text\">git</code> 之后，<code class=\"language-text\">privateKey</code> 将以明文形式保存，非常危险。</p></div></div>\n<h3 id=\"将项目导入-vercel\"><a href=\"#%E5%B0%86%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5-vercel\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>将项目导入 Vercel</h3>\n<p>Vercel（曾经的 ZEIT Now）是一个专注于部署 Jamstack 静态网页和 Serverless API 的服务，其官网位于 <a href=\"https://vercel.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Develop. Preview. Ship. - Vercel</a>。我们使用 GitHub 注册登录 Vercel 之后，仅需将刚刚 Fork 并修改好配置文件版本的 <code class=\"language-text\">ga-hit-count-serverless</code> 导入 Vercel 即可。Vercel 会自动的识别我们项目的环境，生成合适的编译、部署命令，自动将我们的 API 部署到 Vercel 的全球 CDN 上面，方便全世界随时随地的访问。</p>\n<p>但是此时我们并不能正常的使用我们自己部署的 API，因为 <code class=\"language-text\">privateKey</code> 尚未设置。我们需要进入刚刚在 Vercel 上部署好的项目设置中，选择 General » Environment Variables，向其中新增一个环境变量 <code class=\"language-text\">PRIVATE_KEY</code>。之后，我们将刚刚的 Google API JSON 凭证文件里面的私钥，<strong>复制其中的字符串部分，将 <code class=\"language-text\">\\n</code> 全部删掉并更换为换行</strong>，得到类似如下的多行私钥形式：</p>\n<pre class=\"language-text\"><code class=\"language-text\">-----BEGIN PRIVATE KEY-----\ndageWvAIBADANBAokdP8WgkqhkiGkk\n...\nafROdsafbliOjPA==1Hk3mdsafEdBa\n-----END PRIVATE KEY-----</code></pre>\n<p>我们复制这一私钥，再粘贴进入刚刚新建的 <code class=\"language-text\">PRIVATE_KEY</code> 的值。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-213128-6.png\" alt=\"在 Vercel 项目的设置中添加环境变量 PRIVATE_KEY，并存入我们的私钥凭证\"><figcaption>在 Vercel 项目的设置中添加环境变量 PRIVATE_KEY，并存入我们的私钥凭证</figcaption></figure>\n<p>之后，我们需要重新触发一次部署（比如随便向 GitHub 仓库中 commit 并 push 一些东西），完成后我们即可通过 Vercel 给我们提供的域名 <code class=\"language-text\">https://{VERCEL_DOMAIN_NAME}.vercel.app</code> 访问我们的 API。</p>\n<h3 id=\"使用-vercel-serverless-版-api\"><a href=\"#%E4%BD%BF%E7%94%A8-vercel-serverless-%E7%89%88-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>使用 Vercel Serverless 版 API</h3>\n<p>默认情况下，当我们直接访问 <code class=\"language-text\">https://{VERCEL_DOMAIN_NAME}.vercel.app</code> 时，因为没有设定 <code class=\"language-text\">index.html</code>，所以 Vercel 会将当前列表下的文件列出。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-213128-7.png\" alt=\"默认情况下直接访问 Vercel 上部署的 Serverless API 域名\"><figcaption>默认情况下直接访问 Vercel 上部署的 Serverless API 域名</figcaption></figure>\n<p>我们 API 的根域名实际上就是 <code class=\"language-text\">https://{VERCEL_DOMAIN_NAME}.vercel.app</code>。我们可以通过下面的默认请求（添加在 API 根域名后面）来访问 API：</p>\n<pre class=\"language-text\"><code class=\"language-text\">/api/ga</code></pre>\n<p>没有添加任何参数的情况下，默认这一 API 会将你的 Google Analytics 里面全部路径与访问量拉取并给出。以我自己博客为例，访问这一 API 会得到类似下面的 JSON response：</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"page\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/2019/11/tiny-tiny-rss/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"hit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"698\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"page\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/2019/11/weibo-to-twitter/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"hit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"531\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"page\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/2020/03/ttrss-noteworthy/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"hit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"357\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<p>其中，我们可以看到返回的 response 中包含有我们网站中所有路径的 <code class=\"language-text\">hit</code> 阅读量数据，并且数据是按照阅读量递减来排列的。</p>\n<p>当我们需要直接请求网站中某一页面或某个特定路径的数据时，我们可以用这样的语法构造我们的请求：</p>\n<pre class=\"language-text\"><code class=\"language-text\">/api/ga?page={WEBSITE_PAGE_PATH}</code></pre>\n<p>其中请求的 field 为 <code class=\"language-text\">page</code>，参数为目标路径。比如这样的请求：</p>\n<pre class=\"language-text\"><code class=\"language-text\">/api/ga?page=/2020/03/substats/</code></pre>\n<p>将直接返回路径 <code class=\"language-text\">/2020/03/substats/</code> 的阅读量：</p>\n<pre class=\"language-text\"><code class=\"language-text\">[\n  {\n    &quot;page&quot;: &quot;/2020/03/substats/&quot;,\n    &quot;hit&quot;: &quot;311&quot;\n  }\n]</code></pre>\n<p>那么在此基础上，我们即可借助自己在 Vercel 上面部署的 API，来请求 Google Analytics 给我们当前路径的浏览量记录了。利用 <code class=\"language-text\">axios</code> 或者类似的前端 HTTP 请求库，我们可以非常轻松的请求我们部署的 Serverless API，并将结果进行处理，显示在我们的网站里面。你正在浏览的我的博客，就是利用这样的原理实现访问数据的显示。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-213128-8.png\" alt=\"用这样的方法在我自己博客上面显示文章的浏览量\"><figcaption>用这样的方法在我自己博客上面显示文章的浏览量</figcaption></figure>\n<p>到此，我们借助 Google Analytics 和 Vercel Serverless 为文章添加浏览量统计的功能就大功告成了。希望大家能用上本文的办法，为自己的静态博客网站快速添加上文章阅读量统计。感谢阅读 🍒</p>\n"}}]}}},"context":{}}