{"hash":"1a485f6dceb298c3ce36b831edab4aa62783906c","data":{"tag":{"title":"Automation","belongsTo":{"edges":[{"node":{"title":"VS Code Math to Image：在不支持 LaTeX 的地方插入数学公式","path":"/2020/08/vscode-math-to-image/","date":"August 4. 2020","timeToRead":9,"cjkWordCount":2040,"cjkReadTime":9,"description":"为了解决 GitHub 无法渲染 LaTeX 数学公式的问题，我们编写了一个 VS Code 插件。","content":"<div class=\"admonition admonition-note\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\"><path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"></path></svg></div>🛹 同步发布</h5></div><div class=\"admonition-content\"><ul>\n<li><strong>在少数派上阅读本文</strong> — <a href=\"https://sspai.com/post/61877\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">不支持 LaTeX 也能插入数学公式，这个小插件帮你实现「徒手渲染」</a>。</li>\n<li><strong>Read the English version on Medium</strong> — <a href=\"https://medium.com/spencerweekly/vs-code-math-to-image-write-latex-math-equations-in-github-markdown-the-easy-way-9fa8b81dc910?source=friends_link&#x26;sk=cff035b443fb81f5b20a47370f23aed3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VS Code Math to Image: Write LaTeX Math Equations in GitHub Markdown the Easy Way!</a></li>\n</ul></div></div>\n<p>作为每天都在跟数学公式打交道的工程师、数学家，如果我们想要将自己的学术成果开源并发布在网络平台上，那么这个平台至少要支持在 Markdown 里面用 LaTeX 撰写公式。可惜，想要直接在 Markdown 里面撰写数学公式就必须借助第三方库的帮助：比如 MathJax 和 KaTeX。</p>\n<p>因此很多常见的平台都尚未支持 LaTeX 数学公式的渲染，GitHub 就是其中一员——作为可能是世界上最大、最受欢迎的代码开源平台，GitHub 是很多研究人员开源自己学术成果的首选。如果我们想要在 GitHub 的 README 等 Markdown 文件里面撰写数学公式，就必须寻找别的办法。</p>\n<p>非常幸运的是：GitHub 允许我们在 Markdown 里面直接插入 SVG 图片（以及 HTML）。这也就意味着，我们可以先将手上的 LaTeX 数学公式渲染成 SVG，再手动将原来的数学公式替换成 SVG 图片，<strong>达成「徒手渲染 LaTeX 公式」的成就。</strong>💪</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200804_132840.png\" alt=\"将 LaTeX 公式渲染为 SVG 后在 GitHub 上面的显示效果\"><figcaption>将 LaTeX 公式渲染为 SVG 后在 GitHub 上面的显示效果</figcaption></figure>\n<p>如何才能实现并自动化整个过程呢？为了尽量减少各位的麻烦，提升工作效率，我和同学专门编写了一个 VS Code 插件，用来自动将我们在 VS Code 里面选择的数学公式转换成 SVG 图片，并自动嵌入原位置 —— <strong>VS Code Math to Image：</strong></p>\n<ul>\n<li>目前，项目已经开源在 GitHub 上面：<a href=\"https://github.com/TeamMeow/vscode-math-to-image\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub — vscode-math-to-image</a>；</li>\n<li>同时 VS Code 插件也发布到了 Visual Studio Marketplace：<a href=\"https://marketplace.visualstudio.com/items?itemName=MeowTeam.vscode-math-to-image\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VS Marketplace — Math to Image</a>；</li>\n</ul>\n<h2 id=\"插件安装\"><a href=\"#%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>插件安装</h2>\n<p>我们在 VS Code 的插件市场搜索 <code class=\"language-text\">vscode-math-to-image</code>，找到 Math to Image 点击安装即可。直接访问 <a href=\"https://marketplace.visualstudio.com/items?itemName=MeowTeam.vscode-math-to-image\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Marketplace</a> 点击 Install 也可以安装。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200804_134114.png\" alt=\"VS Code 插件市场搜索：vscode-math-to-image\"><figcaption>VS Code 插件市场搜索：vscode-math-to-image</figcaption></figure>\n<h2 id=\"插件使用\"><a href=\"#%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>插件使用</h2>\n<p>我们成功安装插件之后，就可以直接非常方便地用插件将公式转换成可以显示在 GitHub 里面的 SVG 图片啦：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200804_133321.gif\" alt=\"使用 VSCode Math to Image 插件将公式渲染为 SVG\"><figcaption>使用 VSCode Math to Image 插件将公式渲染为 SVG</figcaption></figure>\n<p>具体来讲，比如上面演示动画里面的公式：</p>\n<pre class=\"language-latex\"><code class=\"language-latex\"><span class=\"token equation string\">$$\n<span class=\"token equation-command regex\">\\ell</span> = <span class=\"token equation-command regex\">\\sum</span>_{i}^{N}(y_i - <span class=\"token equation-command regex\">\\hat</span>{y}_i)^2 - ||w||_2^2\n$$</span></code></pre>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">ℓ</mi><mo>=</mo><munderover><mo>∑</mo><mi>i</mi><mi>N</mi></munderover><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mover accent=\"true\"><mi>y</mi><mo>^</mo></mover><mi>i</mi></msub><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>w</mi><mi mathvariant=\"normal\">∣</mi><msubsup><mi mathvariant=\"normal\">∣</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">\\ell = \\sum_{i}^{N}(y_i - \\hat{y}_i)^2 - ||w||_2^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">ℓ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.106005em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.19444em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span></span>\n<p>正常在 Markdown 中我们是会直接用上面的语法让支持渲染 LaTeX 的编辑器渲染公式的，比如 VS Code 默认的 Markdown 预览视图就支持 LaTeX 数学公式的渲染。如果这一 Markdown 文件里面的公式需要在 GitHub 上显示，那么我们就需要用插件将公式渲染成 SVG。我们直接选择这三行 LaTeX 公式代码（包含第一行和第三行的 <code class=\"language-text\">$$</code>），右键并在菜单中选择「Math » Image: Insert rendered equation (local)」或者「Math » Image: Insert rendered equation (remote)」，之后插件就会将我们选中的公式自动注释掉，并在下方添加相应的 SVG 图片引用。（插件里面 <code class=\"language-text\">local</code> 和 <code class=\"language-text\">remote</code> 两个选项工作原理不同，请见后文。）</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200804_133228.png\" alt=\"选择公式右键后在菜单中选择渲染选项\"><figcaption>选择公式右键后在菜单中选择渲染选项</figcaption></figure>\n<p>此时，我们可以发现在 VS Code 的 Markdown 预览界面里面，SVG 图片形式的 LaTeX 公式依旧能够成功渲染，同时这一公式在 GitHub 等仍然不支持 LaTeX 的平台也能正常展现，nice！</p>\n<h2 id=\"工作原理\"><a href=\"#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>工作原理</h2>\n<p>所以，我们插件是如何将一个纯文本格式的 LaTeX 数学公式渲染为 SVG 图片的呢？前面提到的 <code class=\"language-text\">remote</code> 和 <code class=\"language-text\">local</code> 又有怎样的区别呢？这里，我就简单讲解一下插件的渲染和工作原理。</p>\n<p>首先，插件的工作原理非常简单、极易理解，我们实际上就是通过某种方式，解析 LaTeX 撰写的数学公式并将之渲染为 SVG， <code class=\"language-text\">remote</code> 和 <code class=\"language-text\">local</code> 的不同之处就在于：</p>\n<ul>\n<li>前者是借助服务器渲染公式，生成的 SVG 存在于云端；</li>\n<li>后者是直接在本地渲染公式，生成的 SVG 当然也保存于本地；</li>\n</ul>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200804_133452.png\" alt=\"VSCode Math to Image 插件的简单工作原理\"><figcaption>VSCode Math to Image 插件的简单工作原理</figcaption></figure>\n<h3 id=\"将公式借助服务器渲染为云端-svg-图片\"><a href=\"#%E5%B0%86%E5%85%AC%E5%BC%8F%E5%80%9F%E5%8A%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B8%B2%E6%9F%93%E4%B8%BA%E4%BA%91%E7%AB%AF-svg-%E5%9B%BE%E7%89%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>将公式借助服务器渲染为云端 SVG 图片</h3>\n<p>虽然 GitHub 的 README 等 Markdown 文件里面并不支持 LaTeX 数学公式的渲染，但是：<strong>GitHub 确实会在 Jupyter notebook 里面解析并正常渲染 LaTeX 数学公式！</strong>那既然 GitHub 并没有引用第三方的渲染服务，它们究竟是怎样渲染数学公式的呢？答案是：GitHub 有自己的 LaTeX 渲染服务器，我们给这一服务器一个格式正确的 LaTeX 公式，服务器会直接给我们返回渲染好的 SVG 图片。</p>\n<p>嚯，我们要的正好就是这个服务啊！所以，我们插件的 <code class=\"language-text\">remote</code> 选项，就是借助 GitHub 官方的 LaTeX 渲染服务器，将我们的 LaTeX 数学公式转换为云端 SVG 图片。简单来说，比如下面这个标准正态分布公式：</p>\n<pre class=\"language-latex\"><code class=\"language-latex\"><span class=\"token equation string\">$$\nP(x) = <span class=\"token equation-command regex\">\\frac</span>{1}{<span class=\"token equation-command regex\">\\sigma</span><span class=\"token equation-command regex\">\\sqrt</span>{2<span class=\"token equation-command regex\">\\pi</span>}} e^{<span class=\"token equation-command regex\">\\frac</span>{-(x-<span class=\"token equation-command regex\">\\mu</span>)^2}{2<span class=\"token equation-command regex\">\\sigma</span>^2}}\n$$</span></code></pre>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathsize=\"1.44em\"><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>σ</mi><msqrt><mrow><mn>2</mn><mi>π</mi></mrow></msqrt></mrow></mfrac><msup><mi>e</mi><mfrac><mrow><mo>−</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup></mrow></mfrac></msup></mstyle></mrow><annotation encoding=\"application/x-tex\">\\Large P(x) = \\frac{1}{\\sigma\\sqrt{2\\pi}} e^{\\frac{-(x-\\mu)^2}{2\\sigma^2}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.44em;vertical-align:-0.36em;\"></span><span class=\"mord mathdefault sizing reset-size6 size8\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen sizing reset-size6 size8\">(</span><span class=\"mord mathdefault sizing reset-size6 size8\">x</span><span class=\"mclose sizing reset-size6 size8\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel sizing reset-size6 size8\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.2420736em;vertical-align:-1.3392em;\"></span><span class=\"mord sizing reset-size6 size8\"><span class=\"mopen nulldelimiter sizing reset-size8 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.6427799999999997em;\"><span class=\"pstrut\" style=\"height:3.44em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3.44em;\"><span class=\"pstrut\" style=\"height:3.44em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span></span></span><span style=\"top:-3.30722em;\"><span class=\"pstrut\" style=\"height:3.44em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span></span></span><span style=\"top:-3.67em;\"><span class=\"pstrut\" style=\"height:3.44em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-4.117em;\"><span class=\"pstrut\" style=\"height:3.44em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.93em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size8 size6\"></span></span><span class=\"mord sizing reset-size6 size8\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2876916666666667em;\"><span style=\"top:-3.428102777777778em;margin-right:0.034722222222222224em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size8 size6 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.237808em;\"><span style=\"top:-2.538692em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9304399999999999em;\"><span style=\"top:-2.986em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">μ</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.07544em;\"><span style=\"top:-3.1310000000000002em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4613079999999999em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></span></span></span></span></span></span></span></span>\n<p>我们可以借助插件直接将其转换为用 GitHub 服务器渲染的 SVG 图片，并用 <code class=\"language-text\">&lt;img&gt;</code> 标签插入 Markdown 之中：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://render.githubusercontent.com/render/math?math=P(x)%20%3D%20%5Cfrac%7B1%7D%7B%5Csigma%5Csqrt%7B2%5Cpi%7D%7D%20e%5E%7B%5Cfrac%7B-(x-%5Cmu)%5E2%7D%7B2%5Csigma%5E2%7D%7D%0D<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>这样，我们原公式就被替换为用 GitHub 服务器渲染好的 SVG 图片：</p>\n<figure>\n  <img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200804_134758.png\" alt=\"标准正态分布公式（GitHub LaTeX 渲染服务器渲染得到的 SVG 图片）\" width=\"300px\" >\n  <figcaption>标准正态分布公式（GitHub LaTeX 渲染服务器渲染得到的 SVG 图片）</figcaption>\n</figure>\n<p>同时，由于渲染服务器正好是 GitHub 自己的，所以肯定不会出现被屏蔽、无法访问的现象，非常靠谱。</p>\n<h3 id=\"将公式在本地渲染并直接保存为-svg-图片\"><a href=\"#%E5%B0%86%E5%85%AC%E5%BC%8F%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%B8%B2%E6%9F%93%E5%B9%B6%E7%9B%B4%E6%8E%A5%E4%BF%9D%E5%AD%98%E4%B8%BA-svg-%E5%9B%BE%E7%89%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>将公式在本地渲染并直接保存为 SVG 图片</h3>\n<p>SVG 这一格式非常强大，不仅是矢量图的格式标准，我们还可以在其中添加动画等高级功能。所以实际上，SVG 格式的图片会给网站带来一些安全隐患，也正因为 SVG 的这一特点，导致并非所有的地方都支持外部 SVG 的引用。为了规避这一问题，也为了让 SVG 文件的存在更可控（服务器还是有宕机的风险），我们也实现了 LaTeX 公式「本地渲染」的功能。</p>\n<p>我们插件的 <code class=\"language-text\">local</code> 功能实际上就是借助 MathJax 在本地直接将 LaTeX 公式渲染为本地 SVG 图片。这样，我们就可以将这个保存于本地的 SVG 直接在 Markdown 文件里面引用显示，同样方便。</p>\n<p>继续用上面标准正态分布的公式，我们可以将公式渲染为存储于本地的 SVG：<code class=\"language-text\">svg/e40qQ5G9jw.svg</code>，并直接保存在 Markdown 文件相邻的一个 <code class=\"language-text\">svg</code> 文件夹中。这样，我们就可以继续用 <code class=\"language-text\">&lt;img&gt;</code> 标签将这个本地 SVG 插入我们的 Markdown 之中：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>svg/e40qQ5G9jw.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<figure>\n  <img src=\"https://cdn.spencer.felinae98.cn/blog/2020/08/200804_134658.png\" alt=\"标准正态分布（本地使用 MathJax 渲染得到的 SVG 图片）\" width=\"300px\" >\n  <figcaption>标准正态分布（本地使用 MathJax 渲染得到的 SVG 图片）</figcaption>\n</figure>\n<h2 id=\"小结\"><a href=\"#%E5%B0%8F%E7%BB%93\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>小结</h2>\n<p>以上就是 VS Code Math to Image 这个 VS Code 插件的简单介绍，两种方法（<code class=\"language-text\">remote</code> 和 <code class=\"language-text\">local</code>）都可以帮我们渲染出高质量的 SVG 公式图片，这样我们就可以解决 GitHub 等平台不支持数学公式渲染的一大难题啦！如果你觉得我们的插件非常有用，那么 <a href=\"https://github.com/TeamMeow/vscode-math-to-image\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一定要去 GitHub 给我们点上一个 Star</a>，如果 <a href=\"https://marketplace.visualstudio.com/items?itemName=MeowTeam.vscode-math-to-image&#x26;ssr=false#review-details\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">能去 VS Marketplace 给我们个五星好评</a> 那就更棒啦。</p>\n"}},{"node":{"title":"BIT-Web Automation：如何利用 iOS 快捷指令自动化登录 BIT-Web 校园网","path":"/2019/12/bitweb-auto-login/","date":"December 29. 2019","timeToRead":10,"cjkWordCount":2348,"cjkReadTime":11,"description":"自动化登录 BIT-Web 的最佳实践","content":"<p>BIT-Web 是北京理工大学校园 Wi-Fi，专门用于笔记本等桌面设备，另外还有 BIT-Mobile 用于移动设备。但是，BIT-Mobile 有时候并没有 BIT-Web 稳定，自动登录不是那么靠谱，我们也不能通过 BIT-Mobile 登录使用免费运营商宽带，这些场景下我们都需要在移动设备上连接至 BIT-Web 进行手动登录。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042.png\" alt=\"BIT-Web 和 BIT-Mobile 的对比\"><figcaption>BIT-Web 和 BIT-Mobile 的对比</figcaption></figure>\n<p>最近我的同学跟我说，BIT-Web 的登录页面在移动端（尤其是 Android 平台）上不能正常的显示「密码管理器」，也就不能直接填充密码，每次都需要手动输入。这令人非常烦恼，如何才能实现在连接到 BIT-Web 上之后自动发送登录认证请求来连接至校园网呢？</p>\n<h2 id=\"实现思路\"><a href=\"#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>实现思路</h2>\n<p>对于我的学校来说，登录至校园网的基本操作就是：</p>\n<ul>\n<li>连接到 BIT-Web</li>\n<li>在浏览器中打开网址 <code class=\"language-text\">t.cn</code> 来重定向至登录页面 <code class=\"language-text\">10.0.0.55</code></li>\n<li>输入账号密码并点击登录</li>\n</ul>\n<p>在这背后，我们事实上是给学校校园网登录认证服务器发送了一个带有我们「账号」和「密码」的登录请求（实际来说可能是账号密码组合出的加密认证令牌），之后校园网认证服务器核实我们的身份，并反馈我们认证结果，给予上网权限。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-1.png\" alt=\"连接至 BIT-Web 并进行认证过程发送的网络请求\"><figcaption>连接至 BIT-Web 并进行认证过程发送的网络请求</figcaption></figure>\n<p>这样来说，我们事实上就只需要在每次连接至 BIT-Web 网络时，自动发送这一请求，即可实现自动登录校园网的功能。在 iOS 平台，我们有相当方便的工具来制作发送请求的脚本：快捷指令 Shortcuts，利用 Shortcuts 我们可以定制一个「动作」，实现自动登录的功能。</p>\n<p>另外，iOS 13 里面的 Shortcuts 加入了全新的 <strong>Automation</strong>：基于场景的动作自动化执行功能。利用这一特性，我们就可以定义「连接到 Wi-Fi 名称为 BIT-Web 的网络」这一「触发器」，从而实现自动触发动作的能力。</p>\n<p>好啦，万事俱备，我们开始实现吧～</p>\n<h2 id=\"操作步骤\"><a href=\"#%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>操作步骤</h2>\n<p>接下来，我会以 iOS 的 Shortcuts 中「自动登录校园网」的实现为例，详细介绍我们具体如何实现这样的自动化操作功能。</p>\n<p>首先需要说明的是，iOS 的 Shortcuts 里面能够执行的算法有限，但是就今天（2019.12.25）来说，我校校园网服务器的登录认证接口已经升级，需要进行加密运算生成登录令牌才能正确认证。考虑到我们的脚本仅仅在校园网内部可控环境下执行，这里我们退而求其次，使用旧接口：<strong>直接发送明文账号密码进行认证的 API 来登录校园网。</strong></p>\n<h3 id=\"明确网络请求参数\"><a href=\"#%E6%98%8E%E7%A1%AE%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>明确网络请求参数</h3>\n<p>BIT-Web 的旧登录请求接口是如下配置的：</p>\n<pre class=\"language-http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">POST</span> <span class=\"token request-target url\"><span class=\"token path\"><span class=\"token path-separator\">/</span>include<span class=\"token path-separator\">/</span>auth_action.php</span></span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/x-www-form-urlencoded</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">10.0.0.55:801</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">75</span></span>\n\naction=login&amp;username={YOUR_USERNAME}&amp;password={YOUR_PASSWORD}&amp;ac_id=8&amp;save_me=1&amp;ajax=1</code></pre>\n<p>其中 <code class=\"language-text\">{YOUR_USERNAME}</code> 以及 <code class=\"language-text\">{YOUR_PASSWORD}</code> 均为明文账密，我校曾经就是这样简单粗暴。简单在终端中用 cURL 工具进行测试，在连接 BIT-Web 且尚未登录的情况下，在终端中输入如下的命令：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">--request</span> POST <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--url</span> http://10.0.0.55:801/include/auth_action.php <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--header</span> <span class=\"token string\">'content-type: application/x-www-form-urlencoded'</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--data</span> <span class=\"token assign-left variable\">action</span><span class=\"token operator\">=</span>login <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--data</span> <span class=\"token assign-left variable\">username</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>YOUR_USERNAME<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--data</span> <span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>YOUR_PASSWORD<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--data</span> <span class=\"token assign-left variable\">ac_id</span><span class=\"token operator\">=</span><span class=\"token number\">8</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--data</span> <span class=\"token assign-left variable\">save_me</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--data</span> <span class=\"token assign-left variable\">ajax</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></code></pre>\n<p>将你自己的账号密码带入其中，如果得到类似下面的包含有 <code class=\"language-text\">login_ok</code> 的结果，同时你可以连接互联网，那么说明你的认证成功。</p>\n<blockquote>\n<p><strong>💡 注意：</strong></p>\n<p>这里如果登录失败，校园网认证服务器会直接返回登录失败的原因。比如：已欠费、密码错误等。按照错误信息进行相应的调试即可。</p>\n</blockquote>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-2.png\" alt=\"cURL 测试登录 BIT-Web 效果\"><figcaption>cURL 测试登录 BIT-Web 效果</figcaption></figure>\n<p>上面的 HTTP 请求我来简单分解介绍一下。首先，请求是 <code class=\"language-text\">POST</code> 的方法，格式为 <code class=\"language-text\">application/x-www-form-urlencoded</code>，请求地址（即 url 地址）为 <code class=\"language-text\">http://10.0.0.55:801/include/auth_action.php</code>，参数分别为：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">值</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">action</code></td>\n<td align=\"left\"><code class=\"language-text\">login</code></td>\n<td align=\"left\">设置动作为登录</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">username</code></td>\n<td align=\"left\"><code class=\"language-text\">{YOUR_USERNAME}</code></td>\n<td align=\"left\">发送账户（即学号）</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">password</code></td>\n<td align=\"left\"><code class=\"language-text\">{YOUR_PASSWORD}</code></td>\n<td align=\"left\">发送校园网密码</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">ac_id</code></td>\n<td align=\"left\">8</td>\n<td align=\"left\">代表登录 BIT-Web（BIT-Mobile 登录请求的 <code class=\"language-text\">ac_id</code> 不一样）</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">save_me</code></td>\n<td align=\"left\">1</td>\n<td align=\"left\">保存当前登录 session</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">ajax</code></td>\n<td align=\"left\">1</td>\n<td align=\"left\">（猜测）表示异步发送请求</td>\n</tr>\n</tbody>\n</table>\n<p>搞清楚我们具体的发送信息之后，接下来我们开始着手在 iOS 上面制作 Shortcuts 动作。</p>\n<h3 id=\"制作-shortcuts-动作\"><a href=\"#%E5%88%B6%E4%BD%9C-shortcuts-%E5%8A%A8%E4%BD%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>制作 Shortcuts 动作</h3>\n<p>首先，在 Shortcuts 里面创建新动作，并搜索加入模块「Get contents of URL」。点击模块下部的 Show More，在其中按下图进行配置：</p>\n<!-- ![BIT-Web 登录认证请求模块](https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-3.png) -->\n<p><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-3.png\" alt=\"BIT-Web 登录认证请求模块\" width=\"500px\"></p>\n<ul>\n<li>URL 设置为：<code class=\"language-text\">http://10.0.0.55:801/include/auth_action.php</code></li>\n<li>Method 设置为：<code class=\"language-text\">POST</code></li>\n<li>\n<p>之后会出现 Request Body 的设置字段：</p>\n<ul>\n<li>选择 Request Body 为 <strong>Form</strong></li>\n<li>点击 Add new field，选择 Text 类型。将 Key 字段设置为 <code class=\"language-text\">action</code>，Text 设置为字段设置为 <code class=\"language-text\">login</code></li>\n<li>继续点击 Add new field 并选择 Text 类型。将 Key 字段设置为 <code class=\"language-text\">username</code>，Text 设置为字段设置为<strong>你的校园网用户名（学号）</strong></li>\n<li>继续点击 Add new field 并选择 Text 类型。将 Key 字段设置为 <code class=\"language-text\">password</code>，Text 设置为字段设置为<strong>你的校园网账户密码</strong></li>\n<li>继续点击 Add new field 并选择 Text 类型。将 Key 字段设置为 <code class=\"language-text\">ac_id</code>，Text 设置为字段设置为 8</li>\n<li>继续点击 Add new field 并选择 Text 类型。将 Key 字段设置为 <code class=\"language-text\">save_me</code>，Text 设置为字段设置为 1</li>\n<li>继续点击 Add new field 并选择 Text 类型。将 Key 字段设置为 <code class=\"language-text\">ajax</code>，Text 设置为字段设置为 1</li>\n</ul>\n</li>\n</ul>\n<p>在模块「Get contents of URL」下方添加模块「Text」，<strong>将「Text」的值设置为「Contents of URL」</strong>，也就是上一步网络请求的返回结果。</p>\n<!-- ![将返回数据用 Text 模块规格化](https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-4.jpg) -->\n<p><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-4.jpg\" alt=\"将返回数据用 Text 模块规格化\" width=\"500px\"></p>\n<p>继续，在下面添加模块「If」，用来判断我们登录成功与否。将 If 模块的判断条件设置为「contains」，包含字符设置为 <code class=\"language-text\">login_ok</code>：</p>\n<ul>\n<li>如果匹配成功：说明登录 BIT-Web 成功，发送登录成功通知</li>\n<li>如果匹配失败（进入 Otherwise 部分）：说明登录 BIT-Web 失败，发送登录失败通知以及失败的请求返回的数据</li>\n</ul>\n<!-- ![BIT-Web 登录返回数据处理模块](https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-5.jpg) -->\n<p><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-5.jpg\" alt=\"BIT-Web 登录返回数据处理模块\" width=\"500px\"></p>\n<p>之后，我们测试。将手机连接至校园网 BIT-Web，尝试执行这一 Shortcuts 动作。如果一切顺利，那么你应该可以登录成功，得到如下通知：</p>\n<!-- ![BIT-Web 登录成功](https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-6.jpg) -->\n<p><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-6.jpg\" alt=\"BIT-Web 登录成功\" width=\"500px\"></p>\n<h3 id=\"定义动作触发条件\"><a href=\"#%E5%AE%9A%E4%B9%89%E5%8A%A8%E4%BD%9C%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>定义动作触发条件</h3>\n<p>接下来，我们在 Shortcuts 中设置连接至 BIT-Web 之后自动触发这一动作的功能。在今年秋天 iOS 13 的更新中，Shortcuts 同样更新了其 Automation 的功能。这里我们所要做的就是设置一个「触发器」使得 iPhone 能够自动连接到 WiFi SSID 为 BIT-Web 的网络之后提醒我们执行上面创建的 Shortcuts 动作。</p>\n<p>我们点击 Shortcuts 中间菜单「Automation」，点击上方加号，选择 Create Personal Automation。之后，在菜单中选择 WLAN，在下方菜单中点击 Choose 并选择 BIT-Web。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-7.png\" alt=\"配置连接至 BIT-Web 的自动触发器\"><figcaption>配置连接至 BIT-Web 的自动触发器</figcaption></figure>\n<p>之后，点击右上角 Next，在添加动作模块的页面点击加号，添加一个「Run Shortcut」的模块。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-8.jpg\" alt=\"添加 Run Shortcut 的模块\"><figcaption>添加 Run Shortcut 的模块</figcaption></figure>\n<p>接下来，将「Run Shortcut」模块的执行动作设置为我们刚刚制作的 BIT-Web Shortcut 动作。其他内容无需改动。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-9.png\" alt=\"配置自动执行上一步制作的 BIT-Web Shortcut 动作\"><figcaption>配置自动执行上一步制作的 BIT-Web Shortcut 动作</figcaption></figure>\n<p>之后，点击 Next > Done 保存动作。</p>\n<h2 id=\"效果\"><a href=\"#%E6%95%88%E6%9E%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>效果</h2>\n<p>如果一切顺利，那么你的 iPhone 连接至 BIT-Web 之后，Shortcuts 应用就会自动弹出提醒请求执行 BIT-Web 登录的动作。在通知提醒上面点击执行，我们就可以直接登录至 BIT-Web。</p>\n<blockquote>\n<p><strong>🤔 注意：</strong></p>\n<p>这一快捷指令以及利用快捷指令登录 BIT-Web 是上个月的思路和想法，在上个月这一功能一直完好可用，但是最近我注意到 Wifi 触发器总是无法正确的触发动作的运行，同时在 Reddit 社区里面也有不下 5 条抱怨 WiFi 触发器不工作的内容。因此我怀疑确实是 iOS 出现的 bug 导致的。</p>\n</blockquote>\n<p>另外，如果上面的触发总是无法成功，那么你也可以直接将 BIT-Web Shortcut 动作固定在主屏幕，每次连接到 BIT-Web 之后手动点击执行快捷指令即可。这肯定比跳转登录认证页面输入账号密码登录方便许多。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-215042-10.jpg\" alt=\"直接将 BIT-Web 登录快捷指令固定到主屏幕\"><figcaption>直接将 BIT-Web 登录快捷指令固定到主屏幕</figcaption></figure>\n<p>自动化的操作比人力重复无效劳动要方便许多，打卡、签到，日复一日的登录、提醒，都可以利用「自动化」的思路进行完成。本文就介绍到这里，感谢阅读。</p>\n"}},{"node":{"title":"IFTTT x Integromat：微博 to Twitter 自动转发的最佳实践","path":"/2019/11/weibo-to-twitter/","date":"November 26. 2019","timeToRead":14,"cjkWordCount":3458,"cjkReadTime":16,"description":"一个内容，两边发布，互不干扰，两面开花","content":"<p>IFTTT 网络自动化平台实际上是一个缩写，完全展开的 IFTTT 是「IF this THEN that」- 如果「这」，那么「那」。既然如此，我们利用 IFTTT 就可以实现非常完善的自动化事件处理流程，比如这篇文章我要介绍的就是一个例子：「利用 IFTTT 自动将微博发布的信息同步到 Twitter 上面」的最佳实践。</p>\n<div class=\"admonition admonition-note\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\"><path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"></path></svg></div>附注 🎫</h5></div><div class=\"admonition-content\"><p>本文介绍方法高度借鉴于这篇文章：<a href=\"https://sspai.com/post/51942\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">微博同步至 Twitter，这里有更好的方式 - 少数派</a>，但是本文的介绍方式更为清晰易懂，配置简洁明了，同时也解决了一些如果按照原文直接配置的话会出现的意外问题。</p></div></div>\n<h2 id=\"背景与工作原理\"><a href=\"#%E8%83%8C%E6%99%AF%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>背景与工作原理</h2>\n<p>首先，IFTTT 上面已经有非常多的微博、Twitter 互相自动转发分享的 Applet（就是 IFTTT 的动作），官方甚至都有一个专门的分类，包含了一些基本的微博 → Twitter、Twitter → 微博的动作：<a href=\"https://ifttt.com/connect/sina_weibo/twitter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Connect Sina Weibo to Twitter to unlock powerful experiences</a>。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834.png\" alt=\"IFTTT 官方微博 Twitter 同步 Applet\"><figcaption>IFTTT 官方微博 Twitter 同步 Applet</figcaption></figure>\n<p>但是单独由 IFTTT 进行「微博 → Twitter」的自动转发有着非常的局限性。IFTTT 无法区分：纯文本原创微博、带图原创微博、以及转发微博这三种微博。如果我们只依赖于 IFTTT 来帮我们进行「微博 → Twitter」转发的话：要么我们只能转发文字 + 原微博链接；要么我们转的带图，但是对于纯文本微博 IFTTT 会发送一张「找不到原图」的 Twitter。因此，今天我们所要介绍的方法，就是利用 Integromat 对 IFTTT 获取到的微博进行路由分流，实现对纯文本微博自动发 IFTTT 纯文本微博转发 Applet、对带图微博自动发 IFTTT 带图微博转发 Applet，并自动过滤掉非原创微博的内容。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-1.png\" alt=\"仅靠 IFTTT 只能单独执行某个转发策略，这不够\"><figcaption>仅靠 IFTTT 只能单独执行某个转发策略，这不够</figcaption></figure>\n<h2 id=\"利用-ifttt-和-integromat-配合实现路由转发\"><a href=\"#%E5%88%A9%E7%94%A8-ifttt-%E5%92%8C-integromat-%E9%85%8D%E5%90%88%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 IFTTT 和 Integromat 配合实现路由转发</h2>\n<h3 id=\"流程原理\"><a href=\"#%E6%B5%81%E7%A8%8B%E5%8E%9F%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>流程原理</h3>\n<p>目前和微博平台整合最好、最方便的自动化平台就是 IFTTT，因此我们不能丢掉 IFTTT。利用 IFTTT 获取到微博的信息包括：微博文本、微博原链接以及微博图片链接。因此，我们需要做的就是：</p>\n<ol>\n<li>先利用 IFTTT 获取最新发送的微博，包括微博文本、微博原链接和微博图片这三项参数</li>\n<li>通过 HTTP 请求在 Integromat 中触发 Webhook，利用 Integromat 解析 IFTTT 发送来的数据，根据「图片的有无」进行路由分配，调用合适的 IFTTT 动作</li>\n<li>Integromat 调用合适的 IFTTT 动作之后，IFTTT 执行发送 Twitter 的 Applet</li>\n<li>结束 👍</li>\n</ol>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-2.png\" alt=\"利用 IFTTT 和 Integromat 配合实现微博 Twitter 转发流程\"><figcaption>利用 IFTTT 和 Integromat 配合实现微博 Twitter 转发流程</figcaption></figure>\n<p>我们接下来的基本工作就是按步骤对上面介绍的功能在相应的平台上一一进行实现。</p>\n<h3 id=\"准备工作\"><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>准备工作</h3>\n<p>在一切开始之前，我们需要在 IFTTT 和 Integromat 两个平台上做一些准备工作。</p>\n<h4 id=\"在-integromat-平台创建-scenario\"><a href=\"#%E5%9C%A8-integromat-%E5%B9%B3%E5%8F%B0%E5%88%9B%E5%BB%BA-scenario\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>在 Integromat 平台创建 Scenario</h4>\n<p>在 <a href=\"https://www.integromat.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Integromat</a> 平台注册登录，在 Scenarios 处点击创建：Create a new scenario，搜索 Webhook 并选择，之后点击 Continue 即可。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-3.png\" alt=\"Integromat 创建新 Scenario 并选择 Webhook\"><figcaption>Integromat 创建新 Scenario 并选择 Webhook</figcaption></figure>\n<p>进入创建 Scenario 的界面，我们首先点击中心的问号，选择 Webhooks > Custom Webhooks 作为我们 Scenario 的起点。之后我们配置 Webhook：</p>\n<ul>\n<li>点击 Webhook 设置窗口中的 Add，在弹出的 Add a hook 界面将 Webhook 名称设置为 <strong>IFTTT weibo webhook</strong></li>\n<li>\n<p>点击左下角的 Show advanced settings，在 Data structure 处添加抓取自微博的数据结构：点击 Add，在弹出的窗口中将数据结构名称命名为 <strong>Weibo data structure</strong>。这就是我们从 IFTTT 获取到的微博博文的三个关键数据的存储方式（微博文本、微博链接和微博图片）</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-4.png\" alt=\"配置 Webhook、添加 Data structure\"><figcaption>配置 Webhook、添加 Data structure</figcaption></figure>\n</li>\n<li>\n<p>下面我们开始设置微博数据结构：</p>\n<ul>\n<li>点击右侧 Generator，在弹出的窗口中将 Content type 选择为 <strong>Query String</strong></li>\n<li>在下方 Sample Data 中填入：<code class=\"language-text\">text=weiboText&amp;url=weiboUrl&amp;image=imageUrl</code>，点击保存之后，我们就得到了一个合适的 Data Structure</li>\n<li>可以看到，上面 Sample Data 实际上就是我们利用 IFTTT 获取到微博数据的一个传递，其中 <code class=\"language-text\">text</code> 字段保存「微博文本内容：weiboText」、<code class=\"language-text\">url</code> 字段保存「微博链接：weiboUrl」、<code class=\"language-text\">image</code> 字段保存「微博图片：imageUrl」</li>\n</ul>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-5.png\" alt=\"配置微博 Data structure\"><figcaption>配置微博 Data structure</figcaption></figure>\n</li>\n<li>\n<p>将上面步骤配置的内容全部保存，我们得到这样的一个界面：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-6.png\" alt=\"Integromat Webhook API 地址\"><figcaption>Integromat Webhook API 地址</figcaption></figure>\n</li>\n<li>上图里面我框出来的地方就是 Integromat 的 Webhook API 地址。接下来，将上图中的 API 地址复制，在后面添加上我们刚刚声明的数据结构的请求，并在浏览器中访问一下，让 Integromat 对收到的请求进行判断，自动确定数据结构的数据类型</li>\n<li>\n<p>需要注意的是，我们需要让这一步中的 URL 跟我们 IFTTT 发送给 Integromat 的请求一致，也就是在刚刚复制的 Integromat 请求地址后面，需要正确的拼接上我们的请求数据，这里给出一个示范：</p>\n<ul>\n<li>如果我们的 Integromat Webhook API 地址为：<code class=\"language-text\">https://hook.integromat.com/{integromat_api_key}</code></li>\n<li>我们请求的微博文本内容为：<code class=\"language-text\">TestingMyWebhook</code></li>\n<li>我们请求的微博原文链接为：<code class=\"language-text\">https://m.weibo.cn/detail/4444027372221130</code></li>\n<li>我们请求的微博图片链接为：<code class=\"language-text\">https://wx4.sinaimg.cn/orj360/63e5c1e1ly1g9f2lmag8hj20k00qoac8.jpg</code></li>\n<li>\n<p>那么我们最终拼接出来的 URL 请求为（没有换行，换行方便阅读）：</p>\n<pre class=\"language-text\"><code class=\"language-text\">https://hook.integromat.com/{integromat_api_key}\n?text=TestingMyWebhook\n&amp;url=https://m.weibo.cn/detail/4444027372221130\n&amp;image=https://wx4.sinaimg.cn/orj360/63e5c1e1ly1g9f2lmag8hj20k00qoac8.jpg</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>将上面的 URL 复制到浏览器中访问，加载完成之后，如果我们得到了正确的数据结构，那么 Integromat 那边会自动显示 Successfully Determined，同时浏览器中会显示 Accepted 字样</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-7.png\" alt=\"成功确定数据结构\"><figcaption>成功确定数据结构</figcaption></figure>\n</li>\n</ul>\n<p>到这里，我们先将 Integromat 的全部配置保存妥当，将上面 Integromat 的 URL 请求保存，不要关闭标签页，我们继续准备 IFTTT 的配置项目。</p>\n<div class=\"admonition admonition-caution\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z\"></path></svg></div>注意 🐖</h5></div><div class=\"admonition-content\"><p>如果这里 Integromat 平台未提示 Successfully Determined，或浏览器中未显示 Accepted，那么说明 URL 请求拼接有问题，请再次尝试保证数据结构确定无误，否则会对接下来的配置造成很大影响。</p></div></div>\n<h4 id=\"在-ifttt-平台找到-webhook-接口\"><a href=\"#%E5%9C%A8-ifttt-%E5%B9%B3%E5%8F%B0%E6%89%BE%E5%88%B0-webhook-%E6%8E%A5%E5%8F%A3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>在 IFTTT 平台找到 Webhook 接口</h4>\n<p>在 IFTTT 平台，我们进入 <a href=\"https://ifttt.com/maker_webhooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webhook 的动作界面</a>，点击右侧的 Documentation，不出意外的话，你会看到专属于你自己的 Webhook Key，我们在 Integromat 中最后就会向这个地址发出 HTTP 请求，传递相应的微博博文数据，触发正确的 IFTTT 动作。因此，请记下这一请求的具体方式，包括请求 URL 以及请求 body 格式：</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span> <span class=\"token property\">\"value1\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"value2\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"value3\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span> <span class=\"token punctuation\">}</span></code></pre>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-8.png\" alt=\"Webhook Documentation\"><figcaption>Webhook Documentation</figcaption></figure>\n<p>接下来，我们在刚刚对两个平台的配置的基础之上，对两个平台进行连接，实现自动化的微博 → Twitter 转发过程。</p>\n<h3 id=\"ifttt-触发-webhook调用-integromat\"><a href=\"#ifttt-%E8%A7%A6%E5%8F%91-webhook%E8%B0%83%E7%94%A8-integromat\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IFTTT 触发 Webhook，调用 Integromat</h3>\n<p>首先，我们在 IFTTT 平台创建一个新的 Applet，作为检测到新微博的起始动作。IFTTT 在检测到我们发送一条新微博之后，会向 Integromat 发送一个 HTTP 请求，告知 Integromat 我们的新微博的文本消息、图片内容和原文链接。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-9.png\" alt=\"This 选择 Sina Weibo 触发\"><figcaption>This 选择 Sina Weibo 触发</figcaption></figure>\n<p>在 IFTTT 上面，点击右上角 <a href=\"https://ifttt.com/create\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">头像 > Create</a>，进入创建 Applet 的界面。在 This 处选择 Sina Weibo，选择 New post by you 的触发器。如果要求登录微博那么选择链接即可。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-10.png\" alt=\"That 选择 Webhook 服务\"><figcaption>That 选择 Webhook 服务</figcaption></figure>\n<p>在 That 处选择 Webhooks，选择 Make a web request，之后进入配置 Webhook 的界面。<strong>我们在 URL 处填写刚刚 Integromat 的 Webhook API 地址（不包含测试用的拼接部分，即只填入 Integromat 显示的 URL），在 Method 处选择 POST，在 Content Type 处选择 <code class=\"language-text\">application/x-www-form-urlencode</code>，最后在 Body 处填写：</strong></p>\n<pre class=\"language-text\"><code class=\"language-text\">text={{Text}}&amp;url={{WeiboURL}}&amp;image={{PhotoURL}}</code></pre>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-11.png\" alt=\"填写 Webhook 请求地址，触发 Integromat 动作\"><figcaption>填写 Webhook 请求地址，触发 Integromat 动作</figcaption></figure>\n<p>点击 Create action 保存动作，这样，我们 IFTTT 的起手触发动作就制作完成了。</p>\n<h3 id=\"ifttt-自动发送-twitter-动作\"><a href=\"#ifttt-%E8%87%AA%E5%8A%A8%E5%8F%91%E9%80%81-twitter-%E5%8A%A8%E4%BD%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IFTTT 自动发送 Twitter 动作</h3>\n<p>接下来，我们在 IFTTT 平台继续创建两个不同的 Applet，分别用来处理带图微博和纯文本微博的转发。我们和之前一样，选择 Create，配置 This 和 That。</p>\n<p>对带图微博：</p>\n<ul>\n<li>This 处选择 Webhooks，选择 Receive a web request，并给 Event name 起名为 <code class=\"language-text\">image_weibo</code></li>\n<li>That 处选择 Twitter，选择 Post a tweet，并将 Tweet text 设置为：<code class=\"language-text\">{{Value1}} via Weibo: {{Value2}}</code></li>\n</ul>\n<p>对纯文本微博：</p>\n<ul>\n<li>This 处选择 Webhooks，选择 Receive a web request，并给 Event name 起名为 <code class=\"language-text\">text_weibo</code></li>\n<li>That 处选择 Twitter，选择 Post a tweet with image，并将 Tweet text 设置为：<code class=\"language-text\">{{Value1}} via Weibo: {{Value2}}</code>，将 Image URL 设置为：<code class=\"language-text\">{{Value3}}</code></li>\n</ul>\n<div class=\"admonition admonition-important\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg></div>注意 🍧</h5></div><div class=\"admonition-content\"><p>这里，我们将从 Integromat 中收到即将发送的推特的三个参数，分别为原微博的文本内容、原微博链接以及（如果有）原微博的图片。在 IFTTT 中，我们分别设置这三个参数：</p><ul>\n<li><code class=\"language-text\">{{Value1}}</code>：原微博文本</li>\n<li><code class=\"language-text\">{{Value2}}</code>：原微博链接</li>\n<li><code class=\"language-text\">{{Value3}}</code>：原微博图片（如果有）</li>\n</ul><p>这里的三个 Key 就是 <code class=\"language-text\">{{ ... }}</code> 所包含的内容，这里的配置会和接下来 Integromat 的请求一致。</p></div></div>\n<p>这样，我们 IFTTT 平台的配置就基本完成了。接下来我们对 Integromat 的动作进行完善。</p>\n<h3 id=\"integromat-路由判断树\"><a href=\"#integromat-%E8%B7%AF%E7%94%B1%E5%88%A4%E6%96%AD%E6%A0%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Integromat 路由判断树</h3>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-12.png\" alt=\"Integromat 路由判断树\"><figcaption>Integromat 路由判断树</figcaption></figure>\n<p>在我们刚刚创建的 Scenario 里面，Webhook 后面，添加一个路由选择：Router。（点击右侧突出的半圆即可添加新的元素，搜索 Router，点击 Flow control 并选择 Router 即可添加。）</p>\n<p>在 Router 中第一条分支上面点击，选择设置 Filter，在 Label 处为分支起名为：ImageWeibo，用来专门处理带图片的微博。<strong>在 Condition 里配置 Image contains <code class=\"language-text\">http</code> 的判断条件</strong>，用来正确的调用合适的 IFTTT 动作。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-13.png\" alt=\"第一条分支的 Filter 过滤器\"><figcaption>第一条分支的 Filter 过滤器</figcaption></figure>\n<div class=\"admonition admonition-caution\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z\"></path></svg></div>注意 🍳</h5></div><div class=\"admonition-content\"><p>在最初少数派的文章介绍之中，原作者用「Image exists」作为判断条件。经过我的调试发现：即使是并没有包含图片的纯文本微博，在 IFTTT 抓取微博信息并传到 Integromat 之后，Integromat 判断树并不能正确的判断这条微博没有图片，而是会自动触发默认路径，导致我们依旧发出一条带有「IFTTT 找不到图片」的推特。因此，这里我使用的判断条件为：「Image contains <code class=\"language-text\">http</code>」。</p></div></div>\n<p>在分支末端点击问号，搜索 HTTP，选择 Make a request。之后：</p>\n<ul>\n<li>在 URL 中填入 IFTTT 带图微博转发的 Applet Webhook 请求地址：<code class=\"language-text\">https://maker.ifttt.com/trigger/image_weibo/with/key/{IFTTT API Key}</code>（将 <code class=\"language-text\">{IFTTT API Key}</code> 更换为上面在 IFTTT Webhook Documentation 中配置的 Key。）</li>\n<li>在下面的 Method 中选择 POST</li>\n<li>Body type 中选择 <code class=\"language-text\">application/x-www-form-urlencode</code></li>\n<li>\n<p>在 Fields 中点击 Add item：</p>\n<ul>\n<li>Key 填入 <code class=\"language-text\">value1</code>，Value 选择 <code class=\"language-text\">text</code></li>\n<li>Key 填入 <code class=\"language-text\">value2</code>，Value 选择 <code class=\"language-text\">url</code></li>\n<li>Key 填入 <code class=\"language-text\">value3</code>，Value 选择 <code class=\"language-text\">image</code></li>\n</ul>\n</li>\n</ul>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-14.png\" alt=\"触发 IFTTT 带图微博转发 Applet\"><figcaption>触发 IFTTT 带图微博转发 Applet</figcaption></figure>\n<p>在第二条分支上面点击，选择设置 Filter 并填入 Label 为 PureTextWeibo，在 Condition 处设置筛选条件为：</p>\n<ul>\n<li>Image <em>Does not contain</em> <code class=\"language-text\">http</code> <strong>AND</strong></li>\n<li>Text <em>Does not match pattern (case insensitive)</em> <code class=\"language-text\">(Repost)|(转发微博)|(\\/\\/)|(轉發微博)</code></li>\n</ul>\n<p>两个判断条件进行「与」运算，保证满足两条内容才能触发本条规则。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-15.png\" alt=\"第二条分支的 Filter 过滤器\"><figcaption>第二条分支的 Filter 过滤器</figcaption></figure>\n<p>在分支末端点击问号，搜索 HTTP，选择 Make a request。之后：</p>\n<ul>\n<li>在 URL 中填入 IFTTT 纯文本微博转发的 Applet Webhook 请求地址：<code class=\"language-text\">https://maker.ifttt.com/trigger/text_weibo/with/key/{IFTTT API Key}</code>（将 <code class=\"language-text\">{IFTTT API Key}</code> 更换为上面在 IFTTT Webhook Documentation 中配置的 Key。）</li>\n<li>在下面的 Method 中选择 POST</li>\n<li>Body type 中选择 <code class=\"language-text\">application/x-www-form-urlencode</code></li>\n<li>\n<p>在 Fields 中点击 Add item：</p>\n<ul>\n<li>Key 填入 <code class=\"language-text\">value1</code>，Value 选择 <code class=\"language-text\">text</code></li>\n<li>Key 填入 <code class=\"language-text\">value2</code>，Value 选择 <code class=\"language-text\">url</code></li>\n</ul>\n</li>\n</ul>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-16.png\" alt=\"触发 IFTTT 纯文本微博转发 Applet\"><figcaption>触发 IFTTT 纯文本微博转发 Applet</figcaption></figure>\n<p>到这里，保存 Scenario，我们基本配置任务就完成了。( •̀ ω •́ )y</p>\n<h2 id=\"最终的转发效果以及局限性\"><a href=\"#%E6%9C%80%E7%BB%88%E7%9A%84%E8%BD%AC%E5%8F%91%E6%95%88%E6%9E%9C%E4%BB%A5%E5%8F%8A%E5%B1%80%E9%99%90%E6%80%A7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>最终的转发效果以及局限性</h2>\n<p>如果一些顺利，那么我们就应该可以直接让 IFTTT 和 Integromat 配合在云端默默监控我们的最新微博，并自动的根据合适的方式帮我们转发至 Twitter。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220834-17.png\" alt=\"最终的微博 to 推特转发效果\"><figcaption>最终的微博 to 推特转发效果</figcaption></figure>\n<p>但是，这种转发方式还是有一定的限制，其中最为致命的实际上就是：IFTTT 只能捕获微博的第一张图片，多于一张的图片我们就只能将第一张图片转发到 Twitter。同时 Integromat 的同步次数也有一定的限制，每个月相当于最多能转发 500 条原创微博。不过这些对我来说还是足够的，如果有更多的需求，我推荐大家购买完整版的「奇点」微博客户端，能够自动每次发微博的同时发送推特，更为方便。这篇文章的介绍就到这里，感谢阅读。</p>\n"}}]}}},"context":{}}