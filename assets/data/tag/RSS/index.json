{"hash":"adc5dd754921ba01e034b10e05b52eb94e7d1500","data":{"tag":{"title":"RSS","belongsTo":{"edges":[{"node":{"title":"Tiny Tiny RSS：部署中的普遍问题与注意事项总结","path":"/2020/03/ttrss-noteworthy/","date":"March 13. 2020","timeToRead":7,"cjkWordCount":1844,"cjkReadTime":9,"description":"Tiny Tiny RSS 部署踩坑","content":"<p>最近一直在折腾 Tiny Tiny RSS，包括升级、添加样式和持久化。由于我是直接使用了 Awesome TTRSS 项目提供的 <code class=\"language-text\">docker-compose.yml</code> 部署的 Docker 版本 Tiny Tiny RSS，所以一些经验还是具有普遍性、值得分享的。这里我总结一下我在部署 Tiny Tiny RSS 过程中遇到的一些「普遍问题」和「注意事项」。</p>\n<p>关于如何在自己的服务器上面部署 Tiny Tiny RSS：</p>\n<ul>\n<li><a href=\"https://blog.spencerwoo.com/2019/11/tiny-tiny-rss/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tiny Tiny RSS | 最速部署私有 RSS 服务器</a>：我的博客</li>\n<li><a href=\"https://sspai.com/post/57498\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">找不到满意的 RSS 服务？你可以自己搭建一个</a>：我的少数派文章</li>\n</ul>\n<div class=\"admonition admonition-warning\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"16\" viewBox=\"0 0 12 16\"><path fill-rule=\"evenodd\" d=\"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z\"></path></svg></div>RSS 订阅</h5></div><div class=\"admonition-content\"><p>另外，订阅我博客 RSS 的同学（来自 Feedly 的数据）已经达到了惊人的 10 个！谢谢各位的关注，没有用 RSS 订阅的同学可以点击下方徽章直接在 Feedly 中订阅。🙇‍♂️</p><p><a href=\"https://blog.spencerwoo.com/feed.xml\"><img src=\"https://img.shields.io/badge/subscribe%20via-RSS-ffa500?logo=rss&style=for-the-badge\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a>\n<a href=\"https://feedly.com/i/subscription/feed%2Fhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml\"><img src=\"https://img.shields.io/badge/dynamic/json?color=2bb24c&amp;label=subscribers&amp;query=%24.source.subscribers&amp;url=https%3A%2F%2Ffeedly.com%2Fv3%2Frecommendations%2Ffeeds%2Ffeed%252Fhttps%253A%252F%252Fblog.spencerwoo.com%252Fposts%252Findex.xml&amp;logo=feedly&style=for-the-badge\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a></p></div></div>\n<h2 id=\"如何直接更新最新版本的-tiny-tiny-rss\"><a href=\"#%E5%A6%82%E4%BD%95%E7%9B%B4%E6%8E%A5%E6%9B%B4%E6%96%B0%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84-tiny-tiny-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何直接更新最新版本的 Tiny Tiny RSS</h2>\n<p>首先明确一下，更新 Awesome TTRSS 至最新版时，实际上更新了全部组件，包括 Tiny Tiny RSS 本体、主题、插件等等。比如这次更新（2020 年 2 月更新）就将 <a href=\"https://github.com/levito/tt-rss-feedly-theme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Feedly 主题</a> 最新的更新中加入的 <code class=\"language-text\">feedly-cozy.css</code>、<code class=\"language-text\">feedly-sepia.css</code> 等等主题全部加入了。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455.png\" alt=\"更新之后加入的最新的 Feedly 主题\"><figcaption>更新之后加入的最新的 Feedly 主题</figcaption></figure>\n<p>我推荐大家手动执行更新。更新 Tiny Tiny RSS 本体：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull wangqiru/ttrss:latest</code></pre>\n<p>更新 Mercury 和 OpenCC 服务：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull wangqiru/mercury-parser-api:latest\n<span class=\"token function\">docker</span> pull wangqiru/opencc-api-server:latest</code></pre>\n<p>之后，重启 Tiny Tiny RSS 服务即可：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></code></pre>\n<p>Awesome TTRSS 项目中提供了 Watch Tower 项目，但是我并不推荐大家通过这一工具进行自动更新，因为 Watch Tower 会将你的全部 Docker 容器更新，可能会导致其他环境的不兼容。</p>\n<h2 id=\"如何在编辑-docker-compose-文件之后重启-tiny-tiny-rss\"><a href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BC%96%E8%BE%91-docker-compose-%E6%96%87%E4%BB%B6%E4%B9%8B%E5%90%8E%E9%87%8D%E5%90%AF-tiny-tiny-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何在编辑 docker-compose 文件之后重启 Tiny Tiny RSS</h2>\n<p>无论是重新配置了何种环境，是重新映射的 Volume 还是添加了 <code class=\"language-text\">docker-compose.yml</code> 设置，我都推荐直接用这一命令重启 Tiny Tiny RSS 服务：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></code></pre>\n<p>如果你先运行停止 Docker 容器（<code class=\"language-text\">docker-compose down</code>、<code class=\"language-text\">docker-compose rm</code>）的命令，我都遇到过数据库丢失的情况，因此只要没有特殊需要，<strong>我们都可以只使用上面的命令重启 Tiny Tiny RSS 服务。</strong></p>\n<h2 id=\"如何正确的配置-fever-emulation-api\"><a href=\"#%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E9%85%8D%E7%BD%AE-fever-emulation-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何正确的配置 Fever Emulation API</h2>\n<p>通常，为了适配第三方 RSS 阅读器比如 Reeder，我们需要使用 Fever Emulation API 进行「登录」。首先我们必须开启 Tiny Tiny RSS 外部 API 访问的权限。在 Preference » General » Enable API 处开启：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-1.png\" alt=\"设置允许通过外部 API 访问 Tiny Tiny RSS\"><figcaption>设置允许通过外部 API 访问 Tiny Tiny RSS</figcaption></figure>\n<p>Fever Emulation 的 API 包含有三个部分：</p>\n<ul>\n<li>你的 Fever API 地址（通常是你的服务器域名 + <code class=\"language-text\">/plugins/fever/</code>）</li>\n<li>你的登录用户名</li>\n<li>你的 Fever API 密码</li>\n</ul>\n<p>在 Preferences » Personal data / Authentication » Personal data » Full name 处设置的用户名就是你 <strong>Fever API 的用户名</strong>：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-2.png\" alt=\"找到你的用户名\"><figcaption>找到你的用户名</figcaption></figure>\n<p>在 Preferences » Fever Emulation 处你可以找到：</p>\n<ol>\n<li>Fever API 地址</li>\n<li>设置 Fever API 密码的地方</li>\n</ol>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-3.png\" alt=\"获取 Fever API 地址并设置 Fever Emulation 密码\"><figcaption>获取 Fever API 地址并设置 Fever Emulation 密码</figcaption></figure>\n<p>要知道，设置 Fever API 的密码时点击 Set Password 并不会提示「成功」，不过你可以从 XHR 请求中看到 Password saved 的 response，<strong>所以其实你的密码已经保存啦</strong>。用这里设置的 API 地址、用户名和密码，我们就能成功登录 Reeder 等 RSS 阅读器了。</p>\n<h2 id=\"如何设置分栏视图\"><a href=\"#%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%88%86%E6%A0%8F%E8%A7%86%E5%9B%BE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何设置分栏视图</h2>\n<p>「分栏视图」就是类似笔记应用的一个侧边栏显示订阅文章列表，另一侧显示文章内容的视图。你可以：</p>\n<ol>\n<li>\n<p>在 Preferences » Preferences » Articles 中关闭 Combined mode 的设置：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-4.png\" alt=\"关闭 Combined mode\"><figcaption>关闭 Combined mode</figcaption></figure>\n</li>\n<li>\n<p>回到主界面，在右上角的汉堡键 » Toggle widescreen mode 处点击打开宽屏模式：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-5.png\" alt=\"打开宽屏模式\"><figcaption>打开宽屏模式</figcaption></figure>\n</li>\n</ol>\n<p>这样 Tiny Tiny RSS 就会以分栏视图显示文章列表和文章内容了。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-6.png\" alt=\"Tiny Tiny RSS 分栏视图\"><figcaption>Tiny Tiny RSS 分栏视图</figcaption></figure>\n<p>另外，我的基于 Feedly 修改的主题配置文件：<a href=\"https://gist.github.com/spencerwooo/7a373a3c921a50953ec12f329452ee27\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub - Gist</a></p>\n<h2 id=\"如何正确设置-mercury-全文抓取和-opencc-繁简转换-api\"><a href=\"#%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E8%AE%BE%E7%BD%AE-mercury-%E5%85%A8%E6%96%87%E6%8A%93%E5%8F%96%E5%92%8C-opencc-%E7%B9%81%E7%AE%80%E8%BD%AC%E6%8D%A2-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何正确设置 Mercury 全文抓取和 OpenCC 繁简转换 API</h2>\n<p>如果你使用了 Awesome TTRSS 中包含的 Mercury 全文抓取和 OpenCC 繁简转换 API，那么你应该在 <code class=\"language-text\">docker ps</code> 的输出中看到这两个服务的身影：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-7.png\" alt=\"docker ps 的输出\"><figcaption>docker ps 的输出</figcaption></figure>\n<p>如果你这两个服务的配置和原配置一致：</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service.mercury</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> wangqiru/mercury<span class=\"token punctuation\">-</span>parser<span class=\"token punctuation\">-</span>api<span class=\"token punctuation\">:</span>latest\n  <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mercury\n  <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token number\">3000</span>\n  <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n\n<span class=\"token key atrule\">service.opencc</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> wangqiru/opencc<span class=\"token punctuation\">-</span>api<span class=\"token punctuation\">-</span>server<span class=\"token punctuation\">:</span>latest\n  <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> opencc\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">NODE_ENV</span><span class=\"token punctuation\">:</span> production\n  <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token number\">3000</span>\n  <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</code></pre>\n<p>那么，你只需要在 Tiny Tiny RSS 的 Preferences 中开启这两个插件，并将 API 地址依次设置为如下即可。（Docker 会自动探索相应的服务 API 地址。）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Mercury</th>\n<th align=\"center\">OpenCC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">service.mercury:3000</code></td>\n<td align=\"center\"><code class=\"language-text\">service.opencc:3000</code></td>\n</tr>\n<tr>\n<td align=\"center\"><figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/Snipaste_2020-07-22_22-13-39.png\" alt=\"Mercury 全文抓取\"><figcaption>Mercury 全文抓取</figcaption></figure></td>\n<td align=\"center\"><figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/Snipaste_2020-07-22_22-14-10.png\" alt=\"OpenCC 繁简转换\"><figcaption>OpenCC 繁简转换</figcaption></figure></td>\n</tr>\n</tbody>\n</table>\n<p>注意，你需要在每一个订阅源中明确指定使用 Mercury 或 OpenCC 服务（右键编辑），才可以真正保证服务的准确运行。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-9.png\" alt=\"编辑订阅源，开启 Mercury 或 OpenCC 服务\"><figcaption>编辑订阅源，开启 Mercury 或 OpenCC 服务</figcaption></figure>\n<h2 id=\"如何调试查看-tiny-tiny-rss-与其他容器服务的-log\"><a href=\"#%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95%E6%9F%A5%E7%9C%8B-tiny-tiny-rss-%E4%B8%8E%E5%85%B6%E4%BB%96%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E7%9A%84-log\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何调试、查看 Tiny Tiny RSS 与其他容器服务的 log</h2>\n<p>Docker 容器的 log 查看非常简单。如果我们想用 <code class=\"language-text\">docker-compose</code> 查看整个 Awesome TTRSS 的 log：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看 docker-compose 的 log 后 5 条</span>\n<span class=\"token function\">docker-compose</span> logs <span class=\"token parameter variable\">--tail</span> <span class=\"token number\">5</span></code></pre>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-10.png\" alt=\"查看 docker-compose 启动的全部服务的 log\"><figcaption>查看 docker-compose 启动的全部服务的 log</figcaption></figure>\n<p>我们可以用下面的命令查看单个服务的 log：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看 Mercury 服务后 5 条</span>\n<span class=\"token function\">docker</span> logs mercury <span class=\"token parameter variable\">--tail</span> <span class=\"token number\">5</span></code></pre>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-11.png\" alt=\"查看 Mercury 全文抓取的 log\"><figcaption>查看 Mercury 全文抓取的 log</figcaption></figure>\n<p>另外，我们也可以用下面的命令查看实时更新的 log：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看实时更新的 Mercury 服务（显示 10 条）</span>\n<span class=\"token function\">docker</span> logs mercury <span class=\"token parameter variable\">--tail</span> <span class=\"token number\">10</span> <span class=\"token parameter variable\">-f</span></code></pre>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-12.png\" alt=\"查看实时更新的 Mercury 服务\"><figcaption>查看实时更新的 Mercury 服务</figcaption></figure>\n<h2 id=\"如何持久化-tiny-tiny-rss-图标\"><a href=\"#%E5%A6%82%E4%BD%95%E6%8C%81%E4%B9%85%E5%8C%96-tiny-tiny-rss-%E5%9B%BE%E6%A0%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何持久化 Tiny Tiny RSS 图标</h2>\n<p>升级更新了 Tiny Tiny RSS 服务之后，每次订阅源的图标都会丢失。我们可以通过将 Tiny Tiny RSS 的图标文件夹挂载到 Docker 容器之外来「持久化」图标存储。</p>\n<p>在 <code class=\"language-text\">docker-compose.yml</code> 中，将 Tiny Tiny RSS 的 Docker 容器配置 <code class=\"language-text\">service.rss</code> 中添加如下的配置：</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> ~/awesome<span class=\"token punctuation\">-</span>ttrss/feed<span class=\"token punctuation\">-</span>icons/<span class=\"token punctuation\">:</span>/var/www/feed<span class=\"token punctuation\">-</span>icons/ <span class=\"token comment\"># mount feed icons to local machine</span></code></pre>\n<p>这样即可将 Docker 容器里面 <code class=\"language-text\">/var/www/feed-icons/</code> 文件夹里面的内容挂载到外面服务器上的 <code class=\"language-text\">~/awesome-ttrss/feed-icons/</code> 文件夹。</p>\n<p>另外，我们还需要给 <code class=\"language-text\">~/awesome-ttrss/feed-icons/</code> 文件赋予合适的权限：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-R</span> <span class=\"token number\">777</span> feed-icons</code></pre>\n<p>这样，Tiny Tiny RSS 下载的 favicon 就全部挂载到本机，更新 Docker 容器也不会对这些内容造成任何影响了。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-13.png\" alt=\"将订阅源的 icon 挂载到容器外部\"><figcaption>将订阅源的 icon 挂载到容器外部</figcaption></figure>\n<p>感谢阅读。🙇‍♂️</p>\n"}},{"node":{"title":"Tiny Tiny RSS | 最速部署私有 RSS 服务器","path":"/2019/11/tiny-tiny-rss/","date":"November 18. 2019","timeToRead":12,"cjkWordCount":3039,"cjkReadTime":14,"description":"使用 Awesome TTRSS 部署 Tiny Tiny RSS 的 Docker 镜像","content":"<p>9012 年了，别的小朋友们服务器上面跑着各式各样的东西：博客、云盘、监控脚本……再看看我们那台闲（bai）置（piao）很久的阿里云 Server，里面的 Git 竟然还是 1.8 的上古版本。🤦‍♂️ 不如把那台服务器拿出来，部署一个属于自己的 RSS 服务器，甚至可以跟同学们一起用呢～</p>\n<h2 id=\"rss\"><a href=\"#rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RSS</h2>\n<p>首先我们来说一说 RSS。RSS 的全称是 Really Simple Syndication（简易信息聚合），它是一种消息来源的格式规范，网站可以按照这种格式规范提供文章的标题、摘要、全文等信息给订阅用户，用户可以通过订阅不同网站 RSS 链接的方式将不同的信息源进行聚合，在一个工具里阅读这些内容。</p>\n<p>对于第一次接触 RSS 的同学，推荐大家阅读：<a href=\"https://sspai.com/post/56391\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">高效获取信息，你需要这份 RSS 入门指南</a>，进行扫盲。</p>\n<p>市面上有非常多的 RSS 聚合服务，来帮助我们统一管理、订阅、更新、筛选 RSS 源推送给我们的更新信息，避免我们被海量的文章淹没，也能保证我们多个设备上 RSS 的阅读进度一致。Feedly、Inoreader 等等都是非常不错的 RSS 服务，但是它们的免费版本都有着一定的限制，有时候无法满足我们的全部功能需求，而动辄一个月数十刀的订阅费用又让人望而却步。不慌，开源的 RSS 服务：Tiny Tiny RSS 可以满足我们 RSS 订阅的全部需求！</p>\n<h2 id=\"tiny-tiny-rss-的搭建\"><a href=\"#tiny-tiny-rss-%E7%9A%84%E6%90%AD%E5%BB%BA\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tiny Tiny RSS 的搭建</h2>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309.jpg\" alt=\"使用 Feedly 主题的 Tiny Tiny RSS 服务端\"><figcaption>使用 Feedly 主题的 Tiny Tiny RSS 服务端</figcaption></figure>\n<p>Tiny Tiny RSS 是一个非常优秀的开源免费 RSS 服务引擎，可以直接部署在我们自己的服务器上面，借助于 Docker 优秀方便的容器技术和 Let’s Encrypt 异常简单的 SSL 证书签署机器人 <code class=\"language-text\">certbot</code>，我们几分钟之内就可以部署上线属于我们自己的 RSS 服务，运行在我们可控的服务器上，环境稳定，刷新及时，并且完全免费。👍（当然，除了服务器需要一定的费用。）</p>\n<p>在容器、HTTPS 证书自动签署和虚拟化技术极度发达的今天，整个部署过程非常方便简单。我接下来只利用 iPad 进行讲解演示我们的部署过程。请大家坐和放宽，我们立刻开始。</p>\n<h2 id=\"准备工作\"><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>准备工作</h2>\n<p>在开始之前，首先我们需要准备一个位于公网的服务器，以及一个可以通过 SSH 连接到服务器上的本地设备。这里我使用我同（bai）学（piao）的已经备案的阿里云服务器作为运行 Tiny Tiny RSS 的服务器，并使用 iPad 和 Blink Shell（一个支持 SSH 协议的 iOS 终端 App）作为我的操作设备。Blink Shell 是 iPad 上面最好用的 SSH/Mosh 工具，推荐大家使用。我们在 Blink Shell 中配置好服务器私钥，通过 SSH 登录服务器。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309-1.jpg\" alt=\"利用 Blink Shell 登录至服务器\"><figcaption>利用 Blink Shell 登录至服务器</figcaption></figure>\n<h2 id=\"利用-docker-部署-tiny-tiny-rss\"><a href=\"#%E5%88%A9%E7%94%A8-docker-%E9%83%A8%E7%BD%B2-tiny-tiny-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>利用 Docker 部署 Tiny Tiny RSS</h2>\n<h3 id=\"安装-docker\"><a href=\"#%E5%AE%89%E8%A3%85-docker\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>安装 Docker</h3>\n<p>Docker 是非常优秀的虚拟化容器，借助于 Docker 我们可以方便的部署 Tiny Tiny RSS，首先我们在服务器上安装 Docker 本体。在服务器上面执行下面命令来安装 Docker：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://get.docker.com/ <span class=\"token operator\">|</span> <span class=\"token function\">sh</span></code></pre>\n<p>然后启动 Docker 服务：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl start <span class=\"token function\">docker</span></code></pre>\n<p>然后，我们检查一下 Docker 是否启动成功。我们执行命令：<code class=\"language-text\">sudo systemctl status docker</code>：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309-2.jpg\" alt=\"检查 Docker 服务状态\"><figcaption>检查 Docker 服务状态</figcaption></figure>\n<p>看到如上的输出，说明我们 Docker 服务启动成功。</p>\n<p><em>参考资料：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get Docker Engine - Community for CentOS | Docker Documentation</a></em></p>\n<h3 id=\"安装-docker-compose\"><a href=\"#%E5%AE%89%E8%A3%85-docker-compose\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>安装 docker-compose</h3>\n<p>接下来我们安装 <code class=\"language-text\">docker-compose</code>：一个管理和启动多个 Docker 容器的工具。由于 Tiny Tiny RSS 依赖有 PostgreSQL 的数据库服务以及 <a href=\"https://github.com/HenryQW/mercury_fulltext\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mercury_fulltext</a> 的全文抓取服务等等，这些服务我们都借助于 Docker 部署，因此利用 <code class=\"language-text\">docker-compose</code> 就会大大降低我们的部署难度。</p>\n<p>我们继续，在服务器上面执行下面的命令来安装 <code class=\"language-text\">docker-compose</code>：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-L</span> https://github.com/docker/compose/releases/download/1.25.0/docker-compose-<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-s</span><span class=\"token variable\">`</span></span>-<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-m</span><span class=\"token variable\">`</span></span> <span class=\"token parameter variable\">-o</span> /usr/local/bin/docker-compose</code></pre>\n<p>之后给予安装好的 <code class=\"language-text\">docker-compose</code> 可执行权限：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /usr/local/bin/docker-compose</code></pre>\n<p><em>参考资料：<a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Install Docker Compose | Docker Documentation</a></em></p>\n<p>最后我们运行 <code class=\"language-text\">docker-compose --version</code> 来检查安装是否成功。如果有如下输出，说明我们的 <code class=\"language-text\">docker-compose</code> 安装成功：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309-3.jpg\" alt=\"检查 docker-compose 安装情况\"><figcaption>检查 docker-compose 安装情况</figcaption></figure>\n<h3 id=\"安装-tiny-tiny-rss-及其周边服务\"><a href=\"#%E5%AE%89%E8%A3%85-tiny-tiny-rss-%E5%8F%8A%E5%85%B6%E5%91%A8%E8%BE%B9%E6%9C%8D%E5%8A%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>安装 Tiny Tiny RSS 及其周边服务</h3>\n<p>准备工作已经全部完成，接下来我们下载由 Awesome-TTRSS 配置的 Tiny Tiny RSS 服务的 docker-compose 配置文件：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建 ttrss 目录并进入</span>\n<span class=\"token function\">mkdir</span> ttrss <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> ttrss\n\n<span class=\"token comment\"># 利用 curl 下载 ttrss 的 docker-compose 配置文件至服务器</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fLo</span> docker-compose.yml https://github.com/HenryQW/Awesome-TTRSS/raw/master/docker-compose.yml</code></pre>\n<p>修改 docker-compose.yml 里面的内容：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309-4.png\" alt=\"修改 docker-compose 配置文件\"><figcaption>修改 docker-compose 配置文件</figcaption></figure>\n<ul>\n<li>在配置文件的第 7 行和第 23 行，将 PostgreSQL 数据库的默认密码进行修改。暴露在公网的数据库使用默认密码非常危险。</li>\n<li>在配置文件的第 18 行，将 Tiny Tiny RSS 服务的部署网址修改。比如我的部署网址是 <code class=\"language-text\">https://ttrss.tenkeyseven.com/</code>\n- 注意，如果你的部署 URL 包含端口（比如默认部署端口为 181 端口），那么这里的 URL 也需要加上端口号，格式为 <code class=\"language-text\">{网址}:{端口}</code>\n- 不过不必担心，如果你这里的 URL 配置不正确，那么访问 Tiny Tiny RSS 的时候，Tiny Tiny RSS 会提醒你修改这里的值为正确的 URL，按照提醒进行配置即可</li>\n</ul>\n<p>之后，我们保存配置文件，启动 Tiny Tiny RSS 服务。在刚刚的 <code class=\"language-text\">ttrss</code> 目录下执行：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></code></pre>\n<p>等待脚本执行完成，如果一切没有问题，那么接下来输入 <code class=\"language-text\">docker ps</code>，我们应该看到类似下面的结果：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309-5.jpg\" alt=\"查看正在运行的 Docker 容器\"><figcaption>查看正在运行的 Docker 容器</figcaption></figure>\n<p>上面内容表示我们开启了四个 Docker 容器，分别是：</p>\n<ul>\n<li>Tiny Tiny RSS 本身，监听端口为 <code class=\"language-text\">0.0.0.0:181 -&gt; 80</code>，同时暴露给外网</li>\n<li>PostgreSQL 数据库，仅供内部使用</li>\n<li>Mercury 全文抓取服务，仅供内部使用</li>\n<li>OpenCC 简体、繁体中文转换服务，仅供内部使用</li>\n</ul>\n<p>如果发现问题，修改 docker-compose 配置文件后，需要执行下面的命令重启 Docker 容器们：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 关闭 Docker 容器们</span>\n<span class=\"token function\">docker-compose</span> down\n\n<span class=\"token comment\"># 删除已停止的 Docker 容器</span>\n<span class=\"token function\">docker-compose</span> <span class=\"token function\">rm</span>\n\n<span class=\"token comment\"># ……</span>\n<span class=\"token comment\"># 修改 docker-compose 配置文件</span>\n<span class=\"token comment\"># ……</span>\n\n<span class=\"token comment\"># 再次开启 Docker 服务</span>\n<span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></code></pre>\n<h2 id=\"安装-nginx-作为-docker-容器的反向代理\"><a href=\"#%E5%AE%89%E8%A3%85-nginx-%E4%BD%9C%E4%B8%BA-docker-%E5%AE%B9%E5%99%A8%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>安装 Nginx 作为 Docker 容器的反向代理</h2>\n<p>事实上，到上一步，如果我们访问 <code class=\"language-text\">{服务器 IP}:181</code>，应该可以直接看到 Tiny Tiny RSS 的 Web 前端，但是 Tiny Tiny RSS 并不能直接配置 SSL 证书，也就没法添加 HTTPS 支持。我们利用 Nginx 作为反向代理服务器，即可方便的给 Tiny Tiny RSS 单独绑定一个我们希望的域名，并利用 Let’s Encrypt 来部署 HTTPS。</p>\n<h3 id=\"安装-nginx\"><a href=\"#%E5%AE%89%E8%A3%85-nginx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>安装 Nginx</h3>\n<p>首先我们来安装 Nginx，以 CentOS 为例，我们直接执行下面命令即可：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> nginx</code></pre>\n<p>之后开启 Nginx 服务：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl start nginx</code></pre>\n<p>检查 Nginx 是否启动成功：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status nginx</code></pre>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309-6.jpg\" alt=\"检查 Nginx 运行状态\"><figcaption>检查 Nginx 运行状态</figcaption></figure>\n<h3 id=\"签署-ssl-证书部署-https\"><a href=\"#%E7%AD%BE%E7%BD%B2-ssl-%E8%AF%81%E4%B9%A6%E9%83%A8%E7%BD%B2-https\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>签署 SSL 证书，部署 HTTPS</h3>\n<p>之后，我们利用 Let’s Encrypt 提供的 <code class=\"language-text\">certbot</code> 直接为 Nginx 配置 SSL 证书。首先，我们执行下面的命令安装 <code class=\"language-text\">certbot</code>：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> certbot python2-certbot-nginx</code></pre>\n<p>然后运行 <code class=\"language-text\">certbot</code> 来签署 SSL 证书并自动配置 Nginx 服务：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> certbot <span class=\"token parameter variable\">--nginx</span></code></pre>\n<p><em>参考资料：<a href=\"https://certbot.eff.org/lets-encrypt/centosrhel7-nginx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Certbot | Nginx on CentOS/RHEL 7</a></em></p>\n<p>在这里，certbot 会要求我们输入我们希望签署 SSL 证书的域名，我们选择为 Tiny Tiny RSS 分配的域名（比如我的就是 <code class=\"language-text\">ttrss.tenkeyseven.com</code>）即可。另外，如果 certbot 询问是否需要将访问该网址的全部流量重定向至 HTTPS，那么选择「是」即可。我们等待脚本执行签署任务完毕，然后重启 Nginx 服务：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart nginx</code></pre>\n<p>此时我们如果直接访问这一域名，应该就可以看到带有 HTTPS 的 Nginx 默认网站：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309-7.jpg\" alt=\"HTTPS 配置成功的 Nginx 默认网站\"><figcaption>HTTPS 配置成功的 Nginx 默认网站</figcaption></figure>\n<p>接下来，我们修改 Nginx 的配置文件，配置 Nginx 反向代理，将访问 <code class=\"language-text\">https://ttrss.tenkeyseven.com</code> 的请求指向我们刚刚部署好的 Tiny Tiny RSS 服务，对服务器来说，也就是 <code class=\"language-text\">127.0.0.1:181</code> 这一地址。（如果你没有更改 Tiny Tiny RSS 的端口号的话。）</p>\n<p>Nginx 的配置文件位于 <code class=\"language-text\">/etc/nginx/nginx.conf</code>，我们打开这一文件：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309-8.png\" alt=\"Nginx 配置文件\"><figcaption>Nginx 配置文件</figcaption></figure>\n<ul>\n<li>\n<p>在 <code class=\"language-text\">http</code> 项下，<code class=\"language-text\">server</code> 项前定义 <code class=\"language-text\">upstream</code> 服务：</p>\n<pre class=\"language-text\"><code class=\"language-text\">\t```\n\tupstream ttrssdev {\n\t\tserver 127.0.0.1:181;\n\t\tkeepalive 64;\n\t}\n\t```\n\n\t![Nginx upstream 服务声明](https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309-9.jpg)</code></pre>\n</li>\n<li>\n<p>在刚刚 <code class=\"language-text\">certbot</code> 为我们生成好的响应域名 <code class=\"language-text\">server</code> 项下，注释掉第一行定义 <code class=\"language-text\">root</code> 的内容，并将 <code class=\"language-text\">location /</code> 项修改为：</p>\n<pre class=\"language-text\"><code class=\"language-text\">\t```\n\tlocation / {\n\t\tproxy_redirect off;\n\t\tproxy_pass http://ttrssdev;\n\n\t\tproxy_set_header  Host                $http_host;\n\t\tproxy_set_header  X-Real-IP           $remote_addr;\n\t\tproxy_set_header  X-Forwarded-Ssl     on;\n\t\tproxy_set_header  X-Forwarded-For     $proxy_add_x_forwarded_for;\n\t\tproxy_set_header  X-Forwarded-Proto   $scheme;\n\t\tproxy_set_header  X-Frame-Options     SAMEORIGIN;\n\n\t\tclient_max_body_size        100m;\n\t\tclient_body_buffer_size     128k;\n\n\t\tproxy_buffer_size           4k;\n\t\tproxy_buffers               4 32k;\n\t\tproxy_busy_buffers_size     64k;\n\t\tproxy_temp_file_write_size  64k;\n\t}\n\t```\n\n\t![Nginx 配置文件：反向代理配置](https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309-10.jpg)</code></pre>\n</li>\n</ul>\n<p>这样，我们再次执行 <code class=\"language-text\">sudo systemctl restart nginx</code> 重启 Nginx 服务，一切顺利的话，我们就可以通过我们刚刚签署 SSL 证书的域名访问我们部署好的 Tiny Tiny RSS 服务了！鼓掌 👏</p>\n<p>Tiny Tiny RSS 的默认管理员账户密码是 admin 和 password，请在第一时间进行修改。</p>\n<h2 id=\"配置-tiny-tiny-rss\"><a href=\"#%E9%85%8D%E7%BD%AE-tiny-tiny-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>配置 Tiny Tiny RSS</h2>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220309-11.jpg\" alt=\"Tiny Tiny RSS 配置、主题\"><figcaption>Tiny Tiny RSS 配置、主题</figcaption></figure>\n<p>如果上面步骤没有问题的话，我们在服务器上面所部署的 Tiny Tiny RSS 本身就已经包含了：</p>\n<ul>\n<li>Mercury 全文提取服务（默认未开启）</li>\n<li>OpenCC 繁简自动转换服务（默认未开启）</li>\n<li>Fever 格式输出插件（默认已开启，用来和 Reeder 等客户端进行连接）</li>\n<li>包括 Feedly、RSSHub 在内的多款主题</li>\n<li>等等……</li>\n</ul>\n<p>我们不需要多余的配置，开箱即可使用上面的主题和插件，根本不需要操心其他服务的部署和安装。我们登录自己的 Tiny Tiny RSS，在右上角「设置→ 插件」中即可启用上述插件，在「设置 → 主题」处就可以更改我们部署的 Tiny Tiny RSS 所用的主题。这些插件和主题在 <a href=\"https://sspai.com/post/41302\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">如何搭建属于自己的 RSS 服务，高效精准获取信息</a> 中已经介绍了使用方法，这里我就不再赘述了。</p>\n<p>如果有同学对上面的配置还有问题，请直接参考 <a href=\"https://ttrss.henry.wang/zh/#%E6%8F%92%E4%BB%B6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Awesome TTRSS 的官方文档：🐋 Awesome TTRSS | 插件</a></p>\n<h2 id=\"小结\"><a href=\"#%E5%B0%8F%E7%BB%93\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>小结</h2>\n<p>Tiny Tiny RSS 的配置到这里就基本结束了，我相信你通过上面的配置一定已经在自己的服务器上部署成功了 Tiny Tiny RSS 服务，并为它添加了域名和 HTTPS 的支持。另外，Tiny Tiny RSS 还自带了账号系统，可以邀请其他志同道合的朋友们一起使用我们自己部署的 Tiny Tiny RSS。感谢阅读。</p>\n<p>📖 关联阅读：</p>\n<ul>\n<li><a href=\"https://ttrss.henry.wang/zh/#%E5%85%B3%E4%BA%8E\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">🐋 Awesome TTRSS</a></li>\n<li><a href=\"https://sspai.com/post/56893\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">少数派 sspai - Docker 的入门「指北」</a></li>\n<li><a href=\"https://sspai.com/post/41302\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">少数派 sspai - 如何搭建属于自己的 RSS 服务，高效精准获取信息</a></li>\n</ul>\n"}}]}}},"context":{}}