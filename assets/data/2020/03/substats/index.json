{"hash":"1a485f6dceb298c3ce36b831edab4aa62783906c","data":{"post":{"title":"Substats：快速统计你在各个平台的关注者！","path":"/2020/03/substats/","date":"March 16. 2020","timeToRead":8,"cjkWordCount":1795,"cjkReadTime":8,"tags":[{"id":"Tech","title":"Tech","path":"/tag/Tech/"},{"id":"Server","title":"Server","path":"/tag/Server/"},{"id":"Serverless","title":"Serverless","path":"/tag/Serverless/"},{"id":"Cloudflare","title":"Cloudflare","path":"/tag/Cloudflare/"}],"description":"Subscriber statistics：专注提供各个网站和社区里用户的订阅者、关注者、粉丝数量的 Serverless API","published":true,"content":"<div class=\"admonition admonition-important\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg></div>SUBSTATS</h5></div><div class=\"admonition-content\"><p>Serverless Function to Count How Many People are Subscribed to You in Your Favorite Services.\n<strong>你只管调用，我们来帮你找订阅者！</strong></p></div></div>\n<p>在 <a href=\"https://blog.spencerwoo.com/2020/03/ttrss-noteworthy/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上一篇文章</a> 里面，我在开头用 Feedly 的 API 和 Shields.io 制作了显示我 RSS 订阅数量的 Badge。这个 Badge 不仅是实时更新、动态加载的，还能轻松嵌入各个网页里面。</p>\n<p><a href=\"https://feedly.com/i/subscription/feed%2Fhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml\"><img src=\"https://img.shields.io/badge/dynamic/json?color=2bb24c&amp;label=subscribers&amp;query=%24.source.subscribers&amp;url=https%3A%2F%2Ffeedly.com%2Fv3%2Frecommendations%2Ffeeds%2Ffeed%252Fhttps%253A%252F%252Fblog.spencerwoo.com%252Fposts%252Findex.xml&amp;logo=feedly&style=for-the-badge\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a></p>\n<p>但是，RSS 订阅服务不仅仅有 Feedly 一家，还有 Inoreader 和 NewsBlur 等等。单一个 Feedly 提供的数据并不能真正显示我们 RSS 链接的订阅人数，于是，我就准备用 Serverless 技术搭建一个「API 中转站」，<strong>提供多个服务商的订阅人数整合的工作。</strong></p>\n<p>其实，最初的 Substats 实际上叫做 RSS-stats，也就是集合多个 RSS 服务商提供的订阅人数数据得到的一个 API 服务。但是后来经过我一番思考，既然都是调用 API，那么为什么不把其他的平台和服务，比如微博粉丝、知乎、少数派、以及 GitHub 和 Twitter 的关注者等等，一起支持一下呢？💡 可行！于是 Substats 就这样诞生啦。(≧∇≦)ﾉ</p>\n<div class=\"admonition admonition-tip\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"16\" viewBox=\"0 0 12 16\"><path fill-rule=\"evenodd\" d=\"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z\"></path></svg></div>相关链接</h5></div><div class=\"admonition-content\"><ul>\n<li><strong>Substats API 地址</strong>：<a href=\"https://api.spencerwoo.com/substats/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API - Substats</a></li>\n<li><strong>Substats GitHub 项目地址</strong>：<a href=\"https://github.com/spencerwooo/Substats\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spencerwooo/Substats</a></li>\n</ul></div></div>\n<h2 id=\"功能特性\"><a href=\"#%E5%8A%9F%E8%83%BD%E7%89%B9%E6%80%A7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>功能特性</h2>\n<p>Substats 是一个非常方便易用的<strong>请求订阅者、粉丝、关注用户数量 API 服务</strong>。目前，Substats 平台支持了包括 Feedly、GitHub、Twitter、知乎和少数派在内的五个平台和网站，并使用 Serverless 技术部署到了 Cloudflare 的 CDN 上，全球部署，飞速响应。Substats 将复杂的原平台 API 请求进行了隐藏、简化和集成，让用 Substats 的你只需要关注<strong>两个参数：平台名称、用户名称</strong>，一波访问，即可得到对应的关注数量。</p>\n<p>得益于强大的 Cloudflare 全球 CDN 网络，Substats 不仅部署方便、维护轻松，<strong>还有着极强的可拓展性、极快的访问速度和极小的请求时延</strong>。甚至在你懂得的地方，你都可以轻松访问到 Twitter 的粉丝数量！🥂</p>\n<h3 id=\"api-endpoint\"><a href=\"#api-endpoint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>API Endpoint</h3>\n<p>Substats 的请求非常简单，基础 API Endpoint 位于：</p>\n<pre class=\"language-text\"><code class=\"language-text\">https://api.spencerwoo.com/substats/</code></pre>\n<p>接下来，我们只需要关注前文提到的平台名 <code class=\"language-text\">source</code> 和用户名称（或 RSS 链接、用户 slug 等标识）<code class=\"language-text\">queryKey</code> 即可构造一个基本的请求。为了更好的和 Shields.io 整合，Substats 仅支持 <code class=\"language-text\">GET</code> 请求，并使用查询字符串（Query String）来添加请求参数。</p>\n<h3 id=\"基础请求\"><a href=\"#%E5%9F%BA%E7%A1%80%E8%AF%B7%E6%B1%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>基础请求</h3>\n<p>一个最基础的请求参数类似：</p>\n<pre class=\"language-http\"><code class=\"language-http\">GET /?source={SOURCE}&amp;queryKey={QUERY}</code></pre>\n<p>其中，我们只需要填入平台名称 <code class=\"language-text\">{SOURCE}</code> 和请求参数 <code class=\"language-text\">{QUERY}</code> 即可。</p>\n<h3 id=\"平台串联请求\"><a href=\"#%E5%B9%B3%E5%8F%B0%E4%B8%B2%E8%81%94%E8%AF%B7%E6%B1%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>平台串联请求</h3>\n<p>我们可以用下面的语法构建单个请求 query 并列请求多个平台的 API，只需要将平台之间用 <code class=\"language-text\">|</code> 分隔即可：</p>\n<pre class=\"language-http\"><code class=\"language-http\">GET /?source={SOURCE_1}|{SOURCE_2}|{SOURCE_3}&amp;queryKey={QUERY}</code></pre>\n<p>其中，这一请求格式特别适合 RSS 订阅的请求，比如当我们想统计同一个 RSS 链接在 Feedly、Inoreader 以及 NewsBlur 三个平台的订阅者数量，即可使用这一语法进行 API 请求。（详见下文例子）</p>\n<h3 id=\"多个平台和用户名的串联请求\"><a href=\"#%E5%A4%9A%E4%B8%AA%E5%B9%B3%E5%8F%B0%E5%92%8C%E7%94%A8%E6%88%B7%E5%90%8D%E7%9A%84%E4%B8%B2%E8%81%94%E8%AF%B7%E6%B1%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>多个平台和用户名的串联请求</h3>\n<pre class=\"language-http\"><code class=\"language-http\">GET /?source={SOURCE}&amp;queryKey={QUERY}&amp;source={SOURCE}&amp;queryKey={QUERY} ....</code></pre>\n<p>如果我们每个平台的请求参数（也就是用户名）不一样，没关系，我们也可以用上面的语法组织各个 <code class=\"language-text\">[平台, 参数]</code> 二元组，依次请求，得到最终数据。在这一过程中，平台、参数的顺序在请求和内部 API 处理的过程中是完全一致的。（你也就不必担心请求的错位。）</p>\n<h2 id=\"一些例子\"><a href=\"#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>一些例子</h2>\n<p>将 Substats 和 <a href=\"https://shields.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shields.io</a> 配合起来，我们可以构造稳定可用的关注者数量实时显示 Badge，嵌入包括 GitHub README、博客文章等等网站的各个位置。我来举个栗子。🌰</p>\n<h3 id=\"单个请求\"><a href=\"#%E5%8D%95%E4%B8%AA%E8%AF%B7%E6%B1%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>单个请求</h3>\n<p>Substats 最初就是为了请求 RSS 订阅者数量，我们先来请求一波 Feedly 的订阅数量。我自己博客（也就是本博客）的 RSS 订阅链接是 <code class=\"language-text\">https://blog.spencerwoo.com/feed.xml</code>，那么，我们就可以用下面的 URL 构造请求：</p>\n<pre class=\"language-http\"><code class=\"language-http\">GET /?source=feedly&amp;queryKey=https://blog.spencerwoo.com/feed.xml</code></pre>\n<p>这一请求会返回如下的数据：</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"totalSubs\"</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"subsInEachSource\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"feedly\"</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"failedSources\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>我们所需要的数据即位于：<code class=\"language-text\">data.totalSubs</code>。在 <a href=\"https://shields.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shields.io</a> 官网，我们即可借助 Dynamic Badge 构建一个自定义的 Badge：</p>\n<ul>\n<li><code class=\"language-text\">data type</code> 选择：<code class=\"language-text\">json</code></li>\n<li><code class=\"language-text\">label</code> 填入：Feedly RSS Subscribes</li>\n<li><code class=\"language-text\">data url</code> 填入：<code class=\"language-text\">https://api.spencerwoo.com/substats/?source=feedly&amp;queryKey=https://blog.spencerwoo.com/feed.xml</code></li>\n<li><code class=\"language-text\">query</code> 填入：<code class=\"language-text\">$.data.totalSubs</code></li>\n<li><code class=\"language-text\">color</code> 填入：<code class=\"language-text\">2bb24c</code>（Feedly 的强调色）</li>\n</ul>\n<p>点击 Make badge，即可生成如下的 Feedly RSS 订阅 Badge：</p>\n<p><a href=\"https://feedly.com/i/subscription/feed%2Fhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml\"><img src=\"https://img.shields.io/badge/dynamic/json?color=2bb24c&label=Feedly%20RSS%20Subscribes&query=%24.data.totalSubs&url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dfeedly%26queryKey%3Dhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a></p>\n<pre class=\"language-text\"><code class=\"language-text\">https://img.shields.io/badge/dynamic/json?color=2bb24c&amp;label=Feedly%20RSS%20Subscribes&amp;query=%24.data.totalSubs&amp;url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dfeedly%26queryKey%3Dhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml</code></pre>\n<p>在这一请求链接的结尾，再手动添加上 Feedly 的 logo 请求参数 <code class=\"language-text\">&amp;logo=feedly</code>，即可将 Badge 添加上图标：</p>\n<p><a href=\"https://feedly.com/i/subscription/feed%2Fhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml\"><img src=\"https://img.shields.io/badge/dynamic/json?color=2bb24c&label=Feedly%20RSS%20Subscribes&query=%24.data.totalSubs&url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dfeedly%26queryKey%3Dhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml&logo=feedly\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a></p>\n<pre class=\"language-text\"><code class=\"language-text\">https://img.shields.io/badge/dynamic/json?color=2bb24c&amp;label=Feedly%20RSS%20Subscribes&amp;query=%24.data.totalSubs&amp;url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dfeedly%26queryKey%3Dhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml&amp;logo=feedly</code></pre>\n<p>另外，我们还可以指定生成超大 For The Badge 风格的 Badge，在上面请求末尾再手动添加参数 <code class=\"language-text\">&amp;style=for-the-badge</code> 即可：</p>\n<p><a href=\"https://feedly.com/i/subscription/feed%2Fhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml\"><img src=\"https://img.shields.io/badge/dynamic/json?color=2bb24c&label=Feedly%20RSS%20Subscribes&query=%24.data.totalSubs&url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dfeedly%26queryKey%3Dhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml&logo=feedly&style=for-the-badge\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a></p>\n<pre class=\"language-text\"><code class=\"language-text\">https://img.shields.io/badge/dynamic/json?color=2bb24c&amp;label=Feedly%20RSS%20Subscribes&amp;query=%24.data.totalSubs&amp;url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dfeedly%26queryKey%3Dhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml&amp;logo=feedly&amp;style=for-the-badge</code></pre>\n<h3 id=\"多个平台串联请求\"><a href=\"#%E5%A4%9A%E4%B8%AA%E5%B9%B3%E5%8F%B0%E4%B8%B2%E8%81%94%E8%AF%B7%E6%B1%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>多个平台串联请求</h3>\n<p>当然，我们可以用 <code class=\"language-text\">|</code> 串联多个请求，比如我同时请求 Feedly、Inoreader 中订阅我 RSS 链接的用户数量：</p>\n<pre class=\"language-http\"><code class=\"language-http\">GET /?source=feedly|inoreader&amp;queryKey=https://blog.spencerwoo.com/feed.xml</code></pre>\n<p>我们会得到如下数据（截至发文 Inoreader 的 API 尚未实现，我正在咨询 Inoreader 平台方是否提供 API 接口）：</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"totalSubs\"</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"subsInEachSource\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"feedly\"</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"inoreader\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"failedSources\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"inoreader\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Not implemented\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://feedly.com/i/subscription/feed%2Fhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml\"><img src=\"https://img.shields.io/badge/dynamic/json?label=RSS%20subs&query=%24.data.totalSubs&url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dfeedly%257Cinoreader%26queryKey%3Dhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml&color=ffa500&logo=rss&style=for-the-badge\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a></p>\n<h3 id=\"多平台多请求参数串联请求\"><a href=\"#%E5%A4%9A%E5%B9%B3%E5%8F%B0%E5%A4%9A%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E4%B8%B2%E8%81%94%E8%AF%B7%E6%B1%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>多平台多请求参数串联请求</h3>\n<p>当每个平台的请求参数（用户名）不一样时，我们可以串联多个请求参数并行请求，比如我希望统计「少数派」平台和「Twitter」平台的粉丝，但是我在这两个平台上面的用户名分别是 <code class=\"language-text\">spencerwoo</code> 和 <code class=\"language-text\">realSpencerWoo</code>，我们即可用下面的方法构造请求：</p>\n<pre class=\"language-http\"><code class=\"language-http\">GET /?source=sspai&amp;queryKey=spencerwoo&amp;source=twitter&amp;queryKey=realSpencerWoo</code></pre>\n<p>我们会得到如下数据：</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"totalSubs\"</span><span class=\"token operator\">:</span> <span class=\"token number\">756</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"subsInEachSource\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"sspai\"</span><span class=\"token operator\">:</span> <span class=\"token number\">636</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"twitter\"</span><span class=\"token operator\">:</span> <span class=\"token number\">120</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"failedSources\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>这样，我们即可非常轻松的构造这样的三个 Badge：</p>\n<p><a href=\"https://api.spencerwoo.com/substats/?source=sspai&queryKey=spencerwoo&source=twitter&queryKey=realSpencerWoo\"><img src=\"https://img.shields.io/badge/dynamic/json?label=Social%20media&query=%24.data.totalSubs&url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dsspai%26queryKey%3Dspencerwoo%26source%3Dtwitter%26queryKey%3DrealSpencerWoo&color=brightgreen&style=for-the-badge\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a>\n<a href=\"https://api.spencerwoo.com/substats/?source=sspai&queryKey=spencerwoo&source=twitter&queryKey=realSpencerWoo\"><img src=\"https://img.shields.io/badge/dynamic/json?label=%E5%B0%91%E6%95%B0%E6%B4%BE&query=%24.data.subsInEachSource.sspai&url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dsspai%26queryKey%3Dspencerwoo%26source%3Dtwitter%26queryKey%3DrealSpencerWoo&color=d71a1b&style=for-the-badge\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a>\n<a href=\"https://api.spencerwoo.com/substats/?source=sspai&queryKey=spencerwoo&source=twitter&queryKey=realSpencerWoo\"><img src=\"https://img.shields.io/badge/dynamic/json?label=Twitter&query=%24.data.subsInEachSource.twitter&url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dsspai%26queryKey%3Dspencerwoo%26source%3Dtwitter%26queryKey%3DrealSpencerWoo&color=1da1f2&logo=twitter&style=for-the-badge\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a></p>\n<h2 id=\"小结\"><a href=\"#%E5%B0%8F%E7%BB%93\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>小结</h2>\n<p>这些就是 Substats 的特别之处，Substats 不仅整合了原服务复杂的 API，还拥有方便的请求构建方法。与 <a href=\"https://shields.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shields.io</a> 配合，我们可以及其方便的构造自定义 Badge。虽然当前 Substats 支持的服务平台还比较少，但是整合其他服务 API 的方法还是相当方便的，欢迎同学们帮我来共同整合其他平台，一起将 Substats 发扬壮大 ( •̀ ω •́ )✧</p>\n<p><strong>最后，如果你觉得 Substats 非常棒，请不要吝啬你的 Star！你们的支持是我输出的最大动力 φ(*￣0￣)</strong></p>\n<p><a href=\"https://github.com/spencerwooo/Substats\"><img src=\"https://img.shields.io/github/stars/spencerwooo/Substats?logo=github&style=social\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a></p>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/substats.a209973.2e248e68a86d53b0f97cdb09599604b9.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/substats.a67b0b2.2e248e68a86d53b0f97cdb09599604b9.png 480w","/assets/static/substats.a209973.2e248e68a86d53b0f97cdb09599604b9.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-4c18365a7d03d468df1b7d6542f4d7c2'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-4c18365a7d03d468df1b7d6542f4d7c2)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAYAAAA9djs/AAAACXBIWXMAABCcAAAQnAEmzTo0AAAF/ElEQVRYw51YW1MURxSe3%2bJj3mOl/AVJXox5EX1IhVRZltwiFwUBQQwlWAWigDygLosLGyTBKITNpRBBxJJd5CIgUoJWAKvQRC47OzO7yy5f%2brT2Zhh6ZjZO1dnp6T59O%2bfr75xexTAM6LqeEvrWNI2LtY3qzN/metHP2mYdw1xnbhNl87zmdtnY5jprO/WVzW3VUWQLFYM5GUC2eJmuMKadrnVeOwPInOS0QTGW3V5IotEoFLvJ3KyXDiqc2u28bPacnWHt0JaOWMdXZIu085ibNyORyC7Lk1Dd1tZW6jscDqfKVC/6qKqaeosy758qM71ImM3jbiSZUc3oEuviBqAfgoITrK1wkxlle3sb9Ih3IpHg752dndS3qBM69CSTScTjcV6m8cz1om8sxtYXS0Bnn7oRhSE5/7L1OSFI7FkRBXEmrB42i50BaGMvXrxAS0sLRkZGMDo6ilAohOHhYQwODqKpqQlzc3MYHx9Hc3MzJiYmcPfuXVy8eJHrv3r1Cu3t7djc3ITH40FdXR3v39/fD8%2bN63i99g9iLx9Be9QGPbwBI7YNXYu4rk92rIUIQyjmBoKFdQAZ5IUuGYze9Ny%2bfRsZGRmYn59HfX09fD4fLly4wOXQoUPo6Ojgm8/OzuYbJiMcPXoU6%2bvr6O7uxsGDB7GysoK%2bvj7k5eXhzZs3yMzMROOVK1hXmXOeDSDSdxaRQBX0rXVmhDgzgubIK05cIXSUdMOUlX0Fcug7FothbW0N165dQ2FhIS5duoSGhgbU1tZyL2dlZaG6uhqrq6soLy/n9cQFJ0%2be5GNRn8OHD%2bPWrVtYWFhAVVUVN%2brY2Bi%2by/wWfYE/gbUQwneKoP9eDW30BvQk2FHYiwJrFLETRxJ0i8PmYyOOAMH78uXLCAQCHO4VFRV48OAB7t27h5qaGgwNDWFgYIDD%2b%2bHDh9zzXV1d3CiEgGAwyCG/tLSE3t5ebqD2tjZcbbyCpZcrSLwNQp9ohxbsgjbRAyO6FwHm9blFsV1HQJx9GYScQp5Zj4iNkEDkJcjO6REE56hDZEgEyoQfT9q0zjwYje0JmemK2IPYsyJLKtJJRMz9RFgRQjqzs7McAUSEQ0SG9%2b/zMsn9D%2bWenh54vV5OmqRPhEmkyPswxCwxPlhjKFlnfGFsx1kYjPx3rlOZ48flAXtI0HrOrTAyp6q7oMa8QZ6nUCa4gcpebxuKioq4nCosQG5ONnJycpBfkI/c3FxOdPv378e%2bffs4F7S2tuLYsWMoLS3lnHDi%2bHHc%2beJLTH92AIvnfwAFSuPDuvh8UYOJjpglcrllhlaHK7LNmxMH20GpH%2blsvuPndWNjgwslNySLi4uYnJzE05lZTM7OY3ruOeeG5zPPMPN0BlNTUwgFQ9zTRHzLy8s8MkxPT/N%2b1L4y8QSvx0axufwXVEqcWJiksVWVzacaeBdmUUhLD/YykuQGkG3eWrYOpqrvQ9%2bd/t9wIKsWeflFKD1Twr1NXi4pKcGZ0jKcLS7CN%2bea8XnPWxz5I4LASBBfl2Xg%2b5ICnD93HmVlZTwqEGESCiorK1FcXIzyClZ3uhxH6k/gq9F8dE8HUFFcjlPFpzmajucW4NO6RXzSGEbLI5WwwQzkzvgytCsC7ua3262Ozl2SmH/qKWo8P8PD2LqzsxN%2bv58nMhTzfUw6vB5c7foVtcOraHj8N0Iz82jwN6K17Tr8nX6uR/rUl7iA92P5g6/DB397J67%2b0or6J9fxeHEcP/3YDS9Llnw3b6LtZicqe5dxpv8dBhfCLLU0diHBnNNYL0PWtyLL/c1x3ikfSHK2d2NzxuPJGKPyKBLbcfzvh02RiMmiChtzx0Ay/t4hTnmAzJnCQIrbzc4uExR1KhtIXGBIIh%2b%2bBZKoPRzRuIfefzMdLbIraog%2b5r58PKar0iVI13ZHGmpn44UjdAHT9tw8BYE7ZYGiTXFKE83xMp08QRZq3MaX5RbiONr9N5HOTdDp/wJbA9gxpVNK7LZBt%2buqDKpOJPwx/1m4GkB2z3cyQroGsKJA5k2nf5nMSJAdy3QdYIcyKv8L5cKUvLt/6FcAAAAASUVORK5CYII=' /%3e%3c/svg%3e"}},"previous":{"title":"Norm：简单介绍如何衡量机器学习中向量的「大小」","path":"/2020/04/norm/"},"next":{"title":"Tiny Tiny RSS：部署中的普遍问题与注意事项总结","path":"/2020/03/ttrss-noteworthy/"}},"context":{"previousElement":"505d6569bd9e2408be0a91a1d0bf8d11","nextElement":"c3ea65449e6ea12ed92fa325921c8b9a","id":"44355ab9668f5c52d127290f0b08d98f"}}