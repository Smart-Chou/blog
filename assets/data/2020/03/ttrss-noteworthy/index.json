{"hash":"1a485f6dceb298c3ce36b831edab4aa62783906c","data":{"post":{"title":"Tiny Tiny RSS：部署中的普遍问题与注意事项总结","path":"/2020/03/ttrss-noteworthy/","date":"March 13. 2020","timeToRead":7,"cjkWordCount":1844,"cjkReadTime":9,"tags":[{"id":"Server","title":"Server","path":"/tag/Server/"},{"id":"RSS","title":"RSS","path":"/tag/RSS/"},{"id":"Tech","title":"Tech","path":"/tag/Tech/"}],"description":"Tiny Tiny RSS 部署踩坑","published":true,"content":"<p>最近一直在折腾 Tiny Tiny RSS，包括升级、添加样式和持久化。由于我是直接使用了 Awesome TTRSS 项目提供的 <code class=\"language-text\">docker-compose.yml</code> 部署的 Docker 版本 Tiny Tiny RSS，所以一些经验还是具有普遍性、值得分享的。这里我总结一下我在部署 Tiny Tiny RSS 过程中遇到的一些「普遍问题」和「注意事项」。</p>\n<p>关于如何在自己的服务器上面部署 Tiny Tiny RSS：</p>\n<ul>\n<li><a href=\"https://blog.spencerwoo.com/2019/11/tiny-tiny-rss/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tiny Tiny RSS | 最速部署私有 RSS 服务器</a>：我的博客</li>\n<li><a href=\"https://sspai.com/post/57498\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">找不到满意的 RSS 服务？你可以自己搭建一个</a>：我的少数派文章</li>\n</ul>\n<div class=\"admonition admonition-warning\"><div class=\"admonition-heading\"><h5><div class=\"admonition-icon\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"16\" viewBox=\"0 0 12 16\"><path fill-rule=\"evenodd\" d=\"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z\"></path></svg></div>RSS 订阅</h5></div><div class=\"admonition-content\"><p>另外，订阅我博客 RSS 的同学（来自 Feedly 的数据）已经达到了惊人的 10 个！谢谢各位的关注，没有用 RSS 订阅的同学可以点击下方徽章直接在 Feedly 中订阅。🙇‍♂️</p><p><a href=\"https://blog.spencerwoo.com/feed.xml\"><img src=\"https://img.shields.io/badge/subscribe%20via-RSS-ffa500?logo=rss&style=for-the-badge\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a>\n<a href=\"https://feedly.com/i/subscription/feed%2Fhttps%3A%2F%2Fblog.spencerwoo.com%2Fposts%2Findex.xml\"><img src=\"https://img.shields.io/badge/dynamic/json?color=2bb24c&amp;label=subscribers&amp;query=%24.source.subscribers&amp;url=https%3A%2F%2Ffeedly.com%2Fv3%2Frecommendations%2Ffeeds%2Ffeed%252Fhttps%253A%252F%252Fblog.spencerwoo.com%252Fposts%252Findex.xml&amp;logo=feedly&style=for-the-badge\" alt=\"\" style=\"display: inline; margin: 0 0.1rem 0 0; width: auto;\"></a></p></div></div>\n<h2 id=\"如何直接更新最新版本的-tiny-tiny-rss\"><a href=\"#%E5%A6%82%E4%BD%95%E7%9B%B4%E6%8E%A5%E6%9B%B4%E6%96%B0%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84-tiny-tiny-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何直接更新最新版本的 Tiny Tiny RSS</h2>\n<p>首先明确一下，更新 Awesome TTRSS 至最新版时，实际上更新了全部组件，包括 Tiny Tiny RSS 本体、主题、插件等等。比如这次更新（2020 年 2 月更新）就将 <a href=\"https://github.com/levito/tt-rss-feedly-theme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Feedly 主题</a> 最新的更新中加入的 <code class=\"language-text\">feedly-cozy.css</code>、<code class=\"language-text\">feedly-sepia.css</code> 等等主题全部加入了。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455.png\" alt=\"更新之后加入的最新的 Feedly 主题\"><figcaption>更新之后加入的最新的 Feedly 主题</figcaption></figure>\n<p>我推荐大家手动执行更新。更新 Tiny Tiny RSS 本体：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull wangqiru/ttrss:latest</code></pre>\n<p>更新 Mercury 和 OpenCC 服务：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull wangqiru/mercury-parser-api:latest\n<span class=\"token function\">docker</span> pull wangqiru/opencc-api-server:latest</code></pre>\n<p>之后，重启 Tiny Tiny RSS 服务即可：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></code></pre>\n<p>Awesome TTRSS 项目中提供了 Watch Tower 项目，但是我并不推荐大家通过这一工具进行自动更新，因为 Watch Tower 会将你的全部 Docker 容器更新，可能会导致其他环境的不兼容。</p>\n<h2 id=\"如何在编辑-docker-compose-文件之后重启-tiny-tiny-rss\"><a href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BC%96%E8%BE%91-docker-compose-%E6%96%87%E4%BB%B6%E4%B9%8B%E5%90%8E%E9%87%8D%E5%90%AF-tiny-tiny-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何在编辑 docker-compose 文件之后重启 Tiny Tiny RSS</h2>\n<p>无论是重新配置了何种环境，是重新映射的 Volume 还是添加了 <code class=\"language-text\">docker-compose.yml</code> 设置，我都推荐直接用这一命令重启 Tiny Tiny RSS 服务：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></code></pre>\n<p>如果你先运行停止 Docker 容器（<code class=\"language-text\">docker-compose down</code>、<code class=\"language-text\">docker-compose rm</code>）的命令，我都遇到过数据库丢失的情况，因此只要没有特殊需要，<strong>我们都可以只使用上面的命令重启 Tiny Tiny RSS 服务。</strong></p>\n<h2 id=\"如何正确的配置-fever-emulation-api\"><a href=\"#%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E9%85%8D%E7%BD%AE-fever-emulation-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何正确的配置 Fever Emulation API</h2>\n<p>通常，为了适配第三方 RSS 阅读器比如 Reeder，我们需要使用 Fever Emulation API 进行「登录」。首先我们必须开启 Tiny Tiny RSS 外部 API 访问的权限。在 Preference » General » Enable API 处开启：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-1.png\" alt=\"设置允许通过外部 API 访问 Tiny Tiny RSS\"><figcaption>设置允许通过外部 API 访问 Tiny Tiny RSS</figcaption></figure>\n<p>Fever Emulation 的 API 包含有三个部分：</p>\n<ul>\n<li>你的 Fever API 地址（通常是你的服务器域名 + <code class=\"language-text\">/plugins/fever/</code>）</li>\n<li>你的登录用户名</li>\n<li>你的 Fever API 密码</li>\n</ul>\n<p>在 Preferences » Personal data / Authentication » Personal data » Full name 处设置的用户名就是你 <strong>Fever API 的用户名</strong>：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-2.png\" alt=\"找到你的用户名\"><figcaption>找到你的用户名</figcaption></figure>\n<p>在 Preferences » Fever Emulation 处你可以找到：</p>\n<ol>\n<li>Fever API 地址</li>\n<li>设置 Fever API 密码的地方</li>\n</ol>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-3.png\" alt=\"获取 Fever API 地址并设置 Fever Emulation 密码\"><figcaption>获取 Fever API 地址并设置 Fever Emulation 密码</figcaption></figure>\n<p>要知道，设置 Fever API 的密码时点击 Set Password 并不会提示「成功」，不过你可以从 XHR 请求中看到 Password saved 的 response，<strong>所以其实你的密码已经保存啦</strong>。用这里设置的 API 地址、用户名和密码，我们就能成功登录 Reeder 等 RSS 阅读器了。</p>\n<h2 id=\"如何设置分栏视图\"><a href=\"#%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%88%86%E6%A0%8F%E8%A7%86%E5%9B%BE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何设置分栏视图</h2>\n<p>「分栏视图」就是类似笔记应用的一个侧边栏显示订阅文章列表，另一侧显示文章内容的视图。你可以：</p>\n<ol>\n<li>\n<p>在 Preferences » Preferences » Articles 中关闭 Combined mode 的设置：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-4.png\" alt=\"关闭 Combined mode\"><figcaption>关闭 Combined mode</figcaption></figure>\n</li>\n<li>\n<p>回到主界面，在右上角的汉堡键 » Toggle widescreen mode 处点击打开宽屏模式：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-5.png\" alt=\"打开宽屏模式\"><figcaption>打开宽屏模式</figcaption></figure>\n</li>\n</ol>\n<p>这样 Tiny Tiny RSS 就会以分栏视图显示文章列表和文章内容了。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-6.png\" alt=\"Tiny Tiny RSS 分栏视图\"><figcaption>Tiny Tiny RSS 分栏视图</figcaption></figure>\n<p>另外，我的基于 Feedly 修改的主题配置文件：<a href=\"https://gist.github.com/spencerwooo/7a373a3c921a50953ec12f329452ee27\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub - Gist</a></p>\n<h2 id=\"如何正确设置-mercury-全文抓取和-opencc-繁简转换-api\"><a href=\"#%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E8%AE%BE%E7%BD%AE-mercury-%E5%85%A8%E6%96%87%E6%8A%93%E5%8F%96%E5%92%8C-opencc-%E7%B9%81%E7%AE%80%E8%BD%AC%E6%8D%A2-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何正确设置 Mercury 全文抓取和 OpenCC 繁简转换 API</h2>\n<p>如果你使用了 Awesome TTRSS 中包含的 Mercury 全文抓取和 OpenCC 繁简转换 API，那么你应该在 <code class=\"language-text\">docker ps</code> 的输出中看到这两个服务的身影：</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-7.png\" alt=\"docker ps 的输出\"><figcaption>docker ps 的输出</figcaption></figure>\n<p>如果你这两个服务的配置和原配置一致：</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service.mercury</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> wangqiru/mercury<span class=\"token punctuation\">-</span>parser<span class=\"token punctuation\">-</span>api<span class=\"token punctuation\">:</span>latest\n  <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mercury\n  <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token number\">3000</span>\n  <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n\n<span class=\"token key atrule\">service.opencc</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> wangqiru/opencc<span class=\"token punctuation\">-</span>api<span class=\"token punctuation\">-</span>server<span class=\"token punctuation\">:</span>latest\n  <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> opencc\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">NODE_ENV</span><span class=\"token punctuation\">:</span> production\n  <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token number\">3000</span>\n  <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</code></pre>\n<p>那么，你只需要在 Tiny Tiny RSS 的 Preferences 中开启这两个插件，并将 API 地址依次设置为如下即可。（Docker 会自动探索相应的服务 API 地址。）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Mercury</th>\n<th align=\"center\">OpenCC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">service.mercury:3000</code></td>\n<td align=\"center\"><code class=\"language-text\">service.opencc:3000</code></td>\n</tr>\n<tr>\n<td align=\"center\"><figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/Snipaste_2020-07-22_22-13-39.png\" alt=\"Mercury 全文抓取\"><figcaption>Mercury 全文抓取</figcaption></figure></td>\n<td align=\"center\"><figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/Snipaste_2020-07-22_22-14-10.png\" alt=\"OpenCC 繁简转换\"><figcaption>OpenCC 繁简转换</figcaption></figure></td>\n</tr>\n</tbody>\n</table>\n<p>注意，你需要在每一个订阅源中明确指定使用 Mercury 或 OpenCC 服务（右键编辑），才可以真正保证服务的准确运行。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-9.png\" alt=\"编辑订阅源，开启 Mercury 或 OpenCC 服务\"><figcaption>编辑订阅源，开启 Mercury 或 OpenCC 服务</figcaption></figure>\n<h2 id=\"如何调试查看-tiny-tiny-rss-与其他容器服务的-log\"><a href=\"#%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95%E6%9F%A5%E7%9C%8B-tiny-tiny-rss-%E4%B8%8E%E5%85%B6%E4%BB%96%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E7%9A%84-log\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何调试、查看 Tiny Tiny RSS 与其他容器服务的 log</h2>\n<p>Docker 容器的 log 查看非常简单。如果我们想用 <code class=\"language-text\">docker-compose</code> 查看整个 Awesome TTRSS 的 log：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看 docker-compose 的 log 后 5 条</span>\n<span class=\"token function\">docker-compose</span> logs <span class=\"token parameter variable\">--tail</span> <span class=\"token number\">5</span></code></pre>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-10.png\" alt=\"查看 docker-compose 启动的全部服务的 log\"><figcaption>查看 docker-compose 启动的全部服务的 log</figcaption></figure>\n<p>我们可以用下面的命令查看单个服务的 log：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看 Mercury 服务后 5 条</span>\n<span class=\"token function\">docker</span> logs mercury <span class=\"token parameter variable\">--tail</span> <span class=\"token number\">5</span></code></pre>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-11.png\" alt=\"查看 Mercury 全文抓取的 log\"><figcaption>查看 Mercury 全文抓取的 log</figcaption></figure>\n<p>另外，我们也可以用下面的命令查看实时更新的 log：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看实时更新的 Mercury 服务（显示 10 条）</span>\n<span class=\"token function\">docker</span> logs mercury <span class=\"token parameter variable\">--tail</span> <span class=\"token number\">10</span> <span class=\"token parameter variable\">-f</span></code></pre>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-12.png\" alt=\"查看实时更新的 Mercury 服务\"><figcaption>查看实时更新的 Mercury 服务</figcaption></figure>\n<h2 id=\"如何持久化-tiny-tiny-rss-图标\"><a href=\"#%E5%A6%82%E4%BD%95%E6%8C%81%E4%B9%85%E5%8C%96-tiny-tiny-rss-%E5%9B%BE%E6%A0%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何持久化 Tiny Tiny RSS 图标</h2>\n<p>升级更新了 Tiny Tiny RSS 服务之后，每次订阅源的图标都会丢失。我们可以通过将 Tiny Tiny RSS 的图标文件夹挂载到 Docker 容器之外来「持久化」图标存储。</p>\n<p>在 <code class=\"language-text\">docker-compose.yml</code> 中，将 Tiny Tiny RSS 的 Docker 容器配置 <code class=\"language-text\">service.rss</code> 中添加如下的配置：</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> ~/awesome<span class=\"token punctuation\">-</span>ttrss/feed<span class=\"token punctuation\">-</span>icons/<span class=\"token punctuation\">:</span>/var/www/feed<span class=\"token punctuation\">-</span>icons/ <span class=\"token comment\"># mount feed icons to local machine</span></code></pre>\n<p>这样即可将 Docker 容器里面 <code class=\"language-text\">/var/www/feed-icons/</code> 文件夹里面的内容挂载到外面服务器上的 <code class=\"language-text\">~/awesome-ttrss/feed-icons/</code> 文件夹。</p>\n<p>另外，我们还需要给 <code class=\"language-text\">~/awesome-ttrss/feed-icons/</code> 文件赋予合适的权限：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-R</span> <span class=\"token number\">777</span> feed-icons</code></pre>\n<p>这样，Tiny Tiny RSS 下载的 favicon 就全部挂载到本机，更新 Docker 容器也不会对这些内容造成任何影响了。</p>\n<figure><img src=\"https://cdn.spencer.felinae98.cn/blog/2020/07/20200722-220455-13.png\" alt=\"将订阅源的 icon 挂载到容器外部\"><figcaption>将订阅源的 icon 挂载到容器外部</figcaption></figure>\n<p>感谢阅读。🙇‍♂️</p>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/ttrss-noteworthy.a209973.8b18d6534945749366b944e658e138c1.png","size":{"width":1280,"height":400},"sizes":"(max-width: 1280px) 100vw, 1280px","srcset":["/assets/static/ttrss-noteworthy.a67b0b2.8b18d6534945749366b944e658e138c1.png 480w","/assets/static/ttrss-noteworthy.a209973.8b18d6534945749366b944e658e138c1.png 1280w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1280 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-c53e7d0085efb1b86b1aa0ee8a531105'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-c53e7d0085efb1b86b1aa0ee8a531105)' width='1280' height='400' xlink:href='data:image/png%3bbase64%2cUklGRhYBAABXRUJQVlA4IAoBAACQBwCdASpAABQAPm0ykkakIyGhLBVbMIANiUAZyK4B0rREbGL66ffvmkBI1M9tZGiaEM8xkauoJQjTvJK2Oa3DsnNJrAAA/v7CoNfoL0pAuac/IZL/uizVeKEBj3199KJ8SbXHXLLRTx/dFYDCuIMg/veAoQSeAf870L//JtkePP3P/P/P/OAfXcmTjrkRaRnhBgQMA3d09Fdg67tr6/UL03KgV4OFK0VKBYxtrw%2bZ%2bZxTajLVNdl2/8/p/zfxWcCNZP/G93k8DqNhTt%2bTyQDSczP0zuMDvxEZng9j/T0RaclR0IQ/ehaAu1oeT9LljOGVImOxAnz9N/uv5//jEVM/H/BqdDsk5dAAAA==' /%3e%3c/svg%3e"}},"previous":{"title":"Substats：快速统计你在各个平台的关注者！","path":"/2020/03/substats/"},"next":{"title":"Remote Jupyter Lab：如何用 Jupyter Lab 将远程服务器资源最大化利用","path":"/2020/03/remote-jupyter-lab/"}},"context":{"previousElement":"44355ab9668f5c52d127290f0b08d98f","nextElement":"aad4c7672a13ebf499a5c676a1c44acc","id":"c3ea65449e6ea12ed92fa325921c8b9a"}}